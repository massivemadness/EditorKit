/*
 * Copyright 2023 Squircle CE contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.blacksquircle.ui.language.html.lexer;

import org.jetbrains.annotations.NotNull;

@SuppressWarnings("all")

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.8.2
 * from the specification file <tt>html.flex</tt>
 */
public class HtmlLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int DOC_TYPE = 2;
  public static final int COMMENT = 4;
  public static final int START_TAG_NAME = 6;
  public static final int END_TAG_NAME = 8;
  public static final int BEFORE_TAG_ATTRIBUTES = 10;
  public static final int TAG_ATTRIBUTES = 12;
  public static final int ATTRIBUTE_VALUE = 14;
  public static final int PROCESSING_INSTRUCTION = 16;
  public static final int TAG_CHARACTERS = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u1f00\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100"+
    "\1\u3900\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u1f00"+
    "\1\u4000\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u1f00\1\u4c00\1\u4d00\1\u4e00"+
    "\1\u1f00\3\u0100\1\u4f00\1\u5000\1\u5100\12\u1f00\4\u0100\1\u5200"+
    "\17\u1f00\2\u0100\1\u5300\41\u1f00\2\u0100\1\u5400\1\u5500\2\u1f00"+
    "\1\u5600\1\u5700\27\u0100\1\u5800\2\u0100\1\u5900\45\u1f00\1\u0100"+
    "\1\u5a00\1\u5b00\11\u1f00\1\u5c00\27\u1f00\1\u5d00\1\u5e00\1\u5f00"+
    "\1\u6000\11\u1f00\1\u6100\1\u6200\5\u1f00\1\u6300\1\u6400\4\u1f00"+
    "\1\u6500\21\u1f00\246\u0100\1\u6600\20\u0100\1\u6700\1\u6800\25\u0100"+
    "\1\u6900\34\u0100\1\u6a00\14\u1f00\2\u0100\1\u6b00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\1\6\1\7\1\0\1\10\1\11\5\0"+
    "\1\12\1\13\1\14\12\15\1\16\1\17\1\20\1\0"+
    "\1\21\1\22\1\0\1\23\1\24\1\25\1\26\1\27"+
    "\1\23\1\16\1\30\1\31\2\16\1\32\1\33\1\16"+
    "\1\34\1\35\3\16\1\36\1\37\2\16\1\40\1\41"+
    "\1\16\1\0\1\42\2\0\1\16\1\0\1\43\1\44"+
    "\1\25\1\26\1\27\1\23\1\45\1\30\1\31\2\16"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\16\1\54"+
    "\1\55\1\56\2\16\1\40\1\41\1\16\12\0\1\57"+
    "\44\0\1\16\12\0\1\16\4\0\1\16\5\0\27\16"+
    "\1\0\37\16\1\0\u01ca\16\4\0\14\16\16\0\5\16"+
    "\7\0\1\16\1\0\1\16\201\0\5\16\1\0\2\16"+
    "\2\0\4\16\1\0\1\16\6\0\1\16\1\0\3\16"+
    "\1\0\1\16\1\0\24\16\1\0\123\16\1\0\213\16"+
    "\10\0\246\16\1\0\46\16\2\0\1\16\6\0\51\16"+
    "\107\0\33\16\4\0\4\16\55\0\53\16\43\0\2\16"+
    "\1\0\143\16\1\0\1\16\17\0\2\16\7\0\2\16"+
    "\12\0\3\16\2\0\1\16\20\0\1\16\1\0\36\16"+
    "\35\0\131\16\13\0\1\16\30\0\41\16\11\0\2\16"+
    "\4\0\1\16\5\0\26\16\4\0\1\16\11\0\1\16"+
    "\3\0\1\16\27\0\31\16\7\0\13\16\65\0\25\16"+
    "\1\0\10\16\106\0\66\16\3\0\1\16\22\0\1\16"+
    "\7\0\12\16\17\0\20\16\4\0\10\16\2\0\2\16"+
    "\2\0\26\16\1\0\7\16\1\0\1\16\3\0\4\16"+
    "\3\0\1\16\20\0\1\16\15\0\2\16\1\0\3\16"+
    "\16\0\2\16\12\0\1\16\10\0\6\16\4\0\2\16"+
    "\2\0\26\16\1\0\7\16\1\0\2\16\1\0\2\16"+
    "\1\0\2\16\37\0\4\16\1\0\1\16\23\0\3\16"+
    "\20\0\11\16\1\0\3\16\1\0\26\16\1\0\7\16"+
    "\1\0\2\16\1\0\5\16\3\0\1\16\22\0\1\16"+
    "\17\0\2\16\27\0\1\16\13\0\10\16\2\0\2\16"+
    "\2\0\26\16\1\0\7\16\1\0\2\16\1\0\5\16"+
    "\3\0\1\16\36\0\2\16\1\0\3\16\17\0\1\16"+
    "\21\0\1\16\1\0\6\16\3\0\3\16\1\0\4\16"+
    "\3\0\2\16\1\0\1\16\1\0\2\16\3\0\2\16"+
    "\3\0\3\16\3\0\14\16\26\0\1\16\64\0\10\16"+
    "\1\0\3\16\1\0\27\16\1\0\20\16\3\0\1\16"+
    "\32\0\3\16\5\0\2\16\36\0\1\16\4\0\10\16"+
    "\1\0\3\16\1\0\27\16\1\0\12\16\1\0\5\16"+
    "\3\0\1\16\40\0\1\16\1\0\2\16\17\0\2\16"+
    "\22\0\10\16\1\0\3\16\1\0\51\16\2\0\1\16"+
    "\20\0\1\16\5\0\3\16\10\0\3\16\30\0\6\16"+
    "\5\0\22\16\3\0\30\16\1\0\11\16\1\0\1\16"+
    "\2\0\7\16\72\0\60\16\1\0\2\16\14\0\7\16"+
    "\72\0\2\16\1\0\1\16\1\0\5\16\1\0\30\16"+
    "\1\0\1\16\1\0\12\16\1\0\2\16\11\0\1\16"+
    "\2\0\5\16\1\0\1\16\25\0\4\16\40\0\1\16"+
    "\77\0\10\16\1\0\44\16\33\0\5\16\163\0\53\16"+
    "\24\0\1\16\20\0\6\16\4\0\4\16\3\0\1\16"+
    "\3\0\2\16\7\0\3\16\4\0\15\16\14\0\1\16"+
    "\21\0\46\16\1\0\1\16\5\0\1\16\2\0\53\16"+
    "\1\0\115\16\1\0\4\16\2\0\7\16\1\0\1\16"+
    "\1\0\4\16\2\0\51\16\1\0\4\16\2\0\41\16"+
    "\1\0\4\16\2\0\7\16\1\0\1\16\1\0\4\16"+
    "\2\0\17\16\1\0\71\16\1\0\4\16\2\0\103\16"+
    "\45\0\20\16\20\0\126\16\2\0\6\16\3\0\u016c\16"+
    "\2\0\21\16\1\0\32\16\5\0\113\16\6\0\10\16"+
    "\7\0\15\16\1\0\4\16\16\0\22\16\16\0\22\16"+
    "\16\0\15\16\1\0\3\16\17\0\64\16\43\0\1\16"+
    "\4\0\1\16\103\0\131\16\7\0\5\16\2\0\42\16"+
    "\1\0\1\16\5\0\106\16\12\0\37\16\61\0\36\16"+
    "\2\0\5\16\13\0\54\16\4\0\32\16\66\0\27\16"+
    "\11\0\65\16\122\0\1\16\135\0\57\16\21\0\7\16"+
    "\67\0\36\16\15\0\2\16\12\0\54\16\32\0\44\16"+
    "\51\0\3\16\12\0\44\16\2\0\11\16\7\0\53\16"+
    "\2\0\3\16\51\0\4\16\1\0\6\16\1\0\2\16"+
    "\3\0\1\16\5\0\300\16\100\0\26\16\2\0\6\16"+
    "\2\0\46\16\2\0\6\16\2\0\10\16\1\0\1\16"+
    "\1\0\1\16\1\0\1\16\1\0\37\16\2\0\65\16"+
    "\1\0\7\16\1\0\1\16\3\0\3\16\1\0\7\16"+
    "\3\0\4\16\2\0\6\16\4\0\15\16\5\0\3\16"+
    "\1\0\7\16\53\0\2\57\107\0\1\16\15\0\1\16"+
    "\20\0\15\16\145\0\1\16\4\0\1\16\2\0\12\16"+
    "\1\0\1\16\3\0\5\16\6\0\1\16\1\0\1\16"+
    "\1\0\1\16\1\0\4\16\1\0\13\16\2\0\4\16"+
    "\5\0\5\16\4\0\1\16\64\0\2\16\u017b\0\57\16"+
    "\1\0\57\16\1\0\205\16\6\0\4\16\3\0\2\16"+
    "\14\0\46\16\1\0\1\16\5\0\1\16\2\0\70\16"+
    "\7\0\1\16\20\0\27\16\11\0\7\16\1\0\7\16"+
    "\1\0\7\16\1\0\7\16\1\0\7\16\1\0\7\16"+
    "\1\0\7\16\1\0\7\16\120\0\1\16\325\0\2\16"+
    "\52\0\5\16\5\0\2\16\4\0\126\16\6\0\3\16"+
    "\1\0\132\16\1\0\4\16\5\0\53\16\1\0\136\16"+
    "\21\0\33\16\65\0\306\16\112\0\360\16\20\0\215\16"+
    "\103\0\56\16\2\0\15\16\3\0\20\16\12\0\2\16"+
    "\24\0\57\16\20\0\37\16\2\0\106\16\61\0\11\16"+
    "\2\0\147\16\2\0\65\16\2\0\5\16\60\0\13\16"+
    "\1\0\3\16\1\0\4\16\1\0\27\16\35\0\64\16"+
    "\16\0\62\16\76\0\6\16\3\0\1\16\1\0\2\16"+
    "\13\0\34\16\12\0\27\16\31\0\35\16\7\0\57\16"+
    "\34\0\1\16\20\0\5\16\1\0\12\16\12\0\5\16"+
    "\1\0\51\16\27\0\3\16\1\0\10\16\24\0\27\16"+
    "\3\0\1\16\3\0\62\16\1\0\1\16\3\0\2\16"+
    "\2\0\5\16\2\0\1\16\1\0\1\16\30\0\3\16"+
    "\2\0\13\16\7\0\3\16\14\0\6\16\2\0\6\16"+
    "\2\0\6\16\11\0\7\16\1\0\7\16\1\0\53\16"+
    "\1\0\14\16\10\0\163\16\35\0\244\16\14\0\27\16"+
    "\4\0\61\16\4\0\156\16\2\0\152\16\46\0\7\16"+
    "\14\0\5\16\5\0\1\16\1\0\12\16\1\0\15\16"+
    "\1\0\5\16\1\0\1\16\1\0\2\16\1\0\2\16"+
    "\1\0\154\16\41\0\153\16\22\0\100\16\2\0\66\16"+
    "\50\0\14\16\164\0\5\16\1\0\207\16\44\0\32\16"+
    "\6\0\32\16\13\0\131\16\3\0\6\16\2\0\6\16"+
    "\2\0\6\16\2\0\3\16\43\0\14\16\1\0\32\16"+
    "\1\0\23\16\1\0\2\16\1\0\17\16\2\0\16\16"+
    "\42\0\173\16\205\0\35\16\3\0\61\16\57\0\40\16"+
    "\15\0\24\16\1\0\10\16\6\0\46\16\12\0\36\16"+
    "\2\0\44\16\4\0\10\16\60\0\236\16\22\0\44\16"+
    "\4\0\44\16\4\0\50\16\10\0\64\16\234\0\67\16"+
    "\11\0\26\16\12\0\10\16\230\0\6\16\2\0\1\16"+
    "\1\0\54\16\1\0\2\16\3\0\1\16\2\0\27\16"+
    "\12\0\27\16\11\0\37\16\101\0\23\16\1\0\2\16"+
    "\12\0\26\16\12\0\32\16\106\0\70\16\6\0\2\16"+
    "\100\0\1\16\17\0\4\16\1\0\3\16\1\0\35\16"+
    "\52\0\35\16\3\0\35\16\43\0\10\16\1\0\34\16"+
    "\33\0\66\16\12\0\26\16\12\0\23\16\15\0\22\16"+
    "\156\0\111\16\67\0\63\16\15\0\63\16\15\0\44\16"+
    "\334\0\35\16\12\0\1\16\10\0\26\16\232\0\27\16"+
    "\14\0\65\16\113\0\55\16\40\0\31\16\32\0\44\16"+
    "\35\0\1\16\13\0\43\16\3\0\1\16\14\0\60\16"+
    "\16\0\4\16\25\0\1\16\1\0\1\16\43\0\22\16"+
    "\1\0\31\16\124\0\7\16\1\0\1\16\1\0\4\16"+
    "\1\0\17\16\1\0\12\16\7\0\57\16\46\0\10\16"+
    "\2\0\2\16\2\0\26\16\1\0\7\16\1\0\2\16"+
    "\1\0\5\16\3\0\1\16\22\0\1\16\14\0\5\16"+
    "\236\0\65\16\22\0\4\16\24\0\1\16\40\0\60\16"+
    "\24\0\2\16\1\0\1\16\270\0\57\16\51\0\4\16"+
    "\44\0\60\16\24\0\1\16\73\0\53\16\15\0\1\16"+
    "\107\0\33\16\345\0\54\16\164\0\100\16\37\0\1\16"+
    "\240\0\10\16\2\0\47\16\20\0\1\16\1\0\1\16"+
    "\34\0\1\16\12\0\50\16\7\0\1\16\25\0\1\16"+
    "\13\0\56\16\23\0\1\16\42\0\71\16\7\0\11\16"+
    "\1\0\45\16\21\0\1\16\61\0\36\16\160\0\7\16"+
    "\1\0\2\16\1\0\46\16\25\0\1\16\31\0\6\16"+
    "\1\0\2\16\1\0\40\16\16\0\1\16\u0147\0\23\16"+
    "\15\0\232\16\346\0\304\16\274\0\57\16\321\0\107\16"+
    "\271\0\71\16\7\0\37\16\161\0\36\16\22\0\60\16"+
    "\20\0\4\16\37\0\25\16\5\0\23\16\260\0\100\16"+
    "\200\0\113\16\5\0\1\16\102\0\15\16\100\0\2\16"+
    "\1\0\1\16\34\0\370\16\10\0\363\16\15\0\37\16"+
    "\61\0\3\16\21\0\4\16\10\0\u018c\16\4\0\153\16"+
    "\5\0\15\16\3\0\11\16\7\0\12\16\146\0\125\16"+
    "\1\0\107\16\1\0\2\16\2\0\1\16\2\0\2\16"+
    "\2\0\4\16\1\0\14\16\1\0\1\16\1\0\7\16"+
    "\1\0\101\16\1\0\4\16\2\0\10\16\1\0\7\16"+
    "\1\0\34\16\1\0\4\16\1\0\5\16\1\0\1\16"+
    "\3\0\7\16\1\0\u0154\16\2\0\31\16\1\0\31\16"+
    "\1\0\37\16\1\0\31\16\1\0\37\16\1\0\31\16"+
    "\1\0\37\16\1\0\31\16\1\0\37\16\1\0\31\16"+
    "\1\0\10\16\64\0\55\16\12\0\7\16\20\0\1\16"+
    "\u0171\0\54\16\24\0\305\16\73\0\104\16\7\0\1\16"+
    "\264\0\4\16\1\0\33\16\1\0\2\16\1\0\1\16"+
    "\2\0\1\16\1\0\12\16\1\0\4\16\1\0\1\16"+
    "\1\0\1\16\6\0\1\16\4\0\1\16\1\0\1\16"+
    "\1\0\1\16\1\0\3\16\1\0\2\16\1\0\1\16"+
    "\2\0\1\16\1\0\1\16\1\0\1\16\1\0\1\16"+
    "\1\0\1\16\1\0\2\16\1\0\1\16\2\0\4\16"+
    "\1\0\7\16\1\0\4\16\1\0\4\16\1\0\1\16"+
    "\1\0\12\16\1\0\21\16\5\0\3\16\1\0\5\16"+
    "\1\0\21\16\104\0\327\16\51\0\65\16\13\0\336\16"+
    "\2\0\u0182\16\16\0\u0131\16\37\0\36\16\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27648];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\7\0\1\2\1\0\1\1\1\3\5\1\4\4"+
    "\1\5\2\4\4\6\2\7\1\10\1\11\1\7\1\12"+
    "\1\7\1\13\1\14\1\15\1\14\2\16\1\4\1\2"+
    "\1\17\1\4\3\20\7\0\1\21\1\22\1\23\1\0"+
    "\1\24\5\0\1\21\1\25\1\16\5\0\1\26\7\0"+
    "\1\27\2\0\1\30\1\0\4\16\1\31\2\0\1\32"+
    "\1\0\1\33\4\0\1\34\2\0\1\35";

  private static int [] zzUnpackAction() {
    int [] result = new int[104];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\u0300\0\u0240\0\u0330\0\u0270\0\u0360\0\u0240\0\u0390\0\u03c0"+
    "\0\u0240\0\u0270\0\u03f0\0\u0420\0\u0240\0\u0270\0\u0450\0\u0240"+
    "\0\u0480\0\u04b0\0\u04e0\0\u0240\0\u0510\0\u0240\0\u0540\0\u0570"+
    "\0\u05a0\0\u04e0\0\u05d0\0\u0240\0\u0600\0\u0240\0\u0270\0\u04e0"+
    "\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780"+
    "\0\u07b0\0\u0240\0\u0330\0\u0240\0\u0360\0\u07e0\0\u0810\0\u0840"+
    "\0\u0870\0\u0240\0\u0240\0\u0240\0\u08a0\0\u08d0\0\u0900\0\u0930"+
    "\0\u0960\0\u0240\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80"+
    "\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0240\0\u03f0\0\u0b70\0\u0ba0"+
    "\0\u0bd0\0\u0c00\0\u0240\0\u0c30\0\u0c60\0\u0240\0\u0c90\0\u0240"+
    "\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0240\0\u0d80\0\u0db0\0\u0240";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[104];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\3\14\2\13\2\15\1\16\7\13\1\17\21\13"+
    "\1\20\14\13\1\21\1\22\3\14\1\22\1\23\2\22"+
    "\1\24\1\25\7\22\1\26\6\22\1\27\4\22\1\30"+
    "\14\22\1\30\4\22\1\14\10\31\1\32\1\31\1\33"+
    "\5\31\1\34\37\31\1\35\3\14\4\35\1\36\5\35"+
    "\1\37\1\35\1\40\2\35\17\37\1\35\14\37\1\14"+
    "\1\35\3\14\4\35\1\36\5\35\1\37\1\35\1\41"+
    "\2\35\17\37\1\35\14\37\1\14\1\35\3\42\4\35"+
    "\1\36\3\35\1\43\4\35\1\44\35\35\1\42\1\45"+
    "\3\14\1\45\1\46\3\45\1\46\2\45\1\43\3\45"+
    "\1\35\1\44\35\45\1\47\1\22\3\14\1\22\1\50"+
    "\2\22\1\24\1\51\2\22\1\52\4\22\1\44\35\22"+
    "\1\14\21\53\1\54\1\55\35\53\1\56\3\14\4\56"+
    "\1\57\3\56\1\60\3\56\1\40\1\44\35\56\1\14"+
    "\1\13\3\0\2\13\3\0\7\13\1\0\21\13\1\20"+
    "\15\13\1\0\3\14\53\0\1\14\66\0\1\61\7\0"+
    "\1\62\4\0\17\62\1\0\1\63\1\62\2\64\1\62"+
    "\1\65\2\62\1\66\3\62\5\0\1\67\7\0\1\70"+
    "\1\0\1\71\3\0\1\72\17\71\1\0\14\71\1\0"+
    "\1\13\3\0\4\13\1\0\7\13\1\0\21\13\1\20"+
    "\16\13\3\14\2\13\3\0\7\13\1\0\21\13\1\20"+
    "\14\13\1\21\5\73\1\74\52\73\11\75\1\74\46\75"+
    "\36\0\1\76\16\0\1\76\41\0\1\77\16\0\1\77"+
    "\13\0\1\100\51\0\1\101\65\0\2\37\1\0\2\37"+
    "\4\0\17\37\1\0\14\37\15\0\1\102\44\0\3\42"+
    "\53\0\1\42\21\0\1\103\36\0\1\45\3\0\1\45"+
    "\1\0\3\45\1\0\2\45\1\0\3\45\2\0\37\45"+
    "\3\14\1\45\1\0\3\45\1\0\2\45\1\0\3\45"+
    "\2\0\35\45\1\47\2\50\2\0\1\50\1\104\34\50"+
    "\1\105\15\50\2\51\2\0\5\51\1\104\30\51\1\106"+
    "\15\51\21\53\1\0\1\107\56\53\1\54\36\53\15\0"+
    "\1\110\22\0\1\111\31\0\2\62\1\0\2\62\1\112"+
    "\3\0\17\62\1\0\14\62\13\0\2\62\1\0\2\62"+
    "\1\112\3\0\17\62\1\0\4\62\1\113\2\62\1\114"+
    "\4\62\13\0\2\62\1\0\2\62\1\112\3\0\17\62"+
    "\1\0\12\62\1\115\1\62\13\0\2\62\1\0\2\62"+
    "\1\112\3\0\17\62\1\0\1\62\1\116\12\62\13\0"+
    "\2\62\1\0\2\62\1\112\3\0\17\62\1\0\13\62"+
    "\1\117\13\0\1\120\13\0\1\121\47\0\1\122\4\0"+
    "\17\122\1\0\14\122\13\0\2\71\1\0\2\71\4\0"+
    "\17\71\1\0\14\71\34\0\1\123\13\0\1\123\34\0"+
    "\1\124\17\0\1\124\34\0\1\125\50\0\1\126\45\0"+
    "\1\50\1\127\1\50\1\130\54\50\1\51\1\131\1\51"+
    "\1\132\54\51\21\53\1\0\36\53\15\0\1\110\1\0"+
    "\1\133\55\0\1\134\5\0\5\134\13\0\2\134\25\0"+
    "\2\62\1\0\2\62\1\112\3\0\17\62\1\0\7\62"+
    "\1\115\4\62\13\0\2\62\1\0\2\62\1\112\3\0"+
    "\17\62\1\0\6\62\1\135\5\62\13\0\2\62\1\0"+
    "\2\62\1\133\3\0\17\62\1\0\14\62\13\0\2\62"+
    "\1\0\2\62\1\112\3\0\17\62\1\0\11\62\1\113"+
    "\2\62\13\0\2\62\1\0\2\62\1\112\3\0\17\62"+
    "\1\0\6\62\1\64\5\62\13\0\1\136\101\0\1\137"+
    "\14\0\1\137\20\0\2\122\1\0\2\122\4\0\17\122"+
    "\1\0\14\122\33\0\1\140\13\0\1\140\43\0\1\141"+
    "\13\0\1\141\11\0\1\50\1\127\1\50\1\130\1\50"+
    "\1\104\34\50\1\105\20\50\1\0\1\50\1\104\34\50"+
    "\1\105\15\50\1\51\1\131\1\51\1\132\5\51\1\104"+
    "\30\51\1\106\20\51\1\0\5\51\1\104\30\51\1\106"+
    "\15\51\15\0\1\134\1\0\1\133\3\0\5\134\13\0"+
    "\2\134\25\0\2\62\1\0\2\62\1\112\3\0\17\62"+
    "\1\0\11\62\1\115\2\62\26\0\1\142\63\0\1\143"+
    "\64\0\1\144\16\0\1\144\27\0\1\145\73\0\1\146"+
    "\53\0\1\147\14\0\1\147\34\0\1\150\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3552];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\7\0\1\1\1\0\2\1\1\11\4\1\1\11"+
    "\3\1\1\11\2\1\1\11\3\1\1\11\2\1\1\11"+
    "\3\1\1\11\1\1\1\11\5\1\1\11\1\1\1\11"+
    "\2\1\7\0\2\1\1\11\1\0\1\11\5\0\3\11"+
    "\5\0\1\11\7\0\1\1\2\0\1\11\1\0\4\1"+
    "\1\11\2\0\1\11\1\0\1\11\4\0\1\11\2\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[104];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public final int getTokenStart() {
      return (int) yychar;
  }

  public final int getTokenEnd() {
      return getTokenStart() + yylength();
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public HtmlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @NotNull
  public HtmlToken advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return HtmlToken.EOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return HtmlToken.XML_DATA_CHARACTERS;
            }
            // fall through
          case 30: break;
          case 2:
            { return HtmlToken.XML_PI_TARGET;
            }
            // fall through
          case 31: break;
          case 3:
            { return HtmlToken.WHITESPACE;
            }
            // fall through
          case 32: break;
          case 4:
            { return HtmlToken.BAD_CHARACTER;
            }
            // fall through
          case 33: break;
          case 5:
            { yybegin(YYINITIAL); return HtmlToken.XML_DOCTYPE_END;
            }
            // fall through
          case 34: break;
          case 6:
            { return HtmlToken.XML_COMMENT_CHARACTERS;
            }
            // fall through
          case 35: break;
          case 7:
            { yybegin(YYINITIAL); yypushback(1); break;
            }
            // fall through
          case 36: break;
          case 8:
            { yybegin(BEFORE_TAG_ATTRIBUTES); return HtmlToken.XML_TAG_NAME;
            }
            // fall through
          case 37: break;
          case 9:
            { return HtmlToken.XML_START_TAG_START;
            }
            // fall through
          case 38: break;
          case 10:
            { yybegin(TAG_ATTRIBUTES); return HtmlToken.WHITESPACE;
            }
            // fall through
          case 39: break;
          case 11:
            { yybegin(YYINITIAL); return HtmlToken.XML_TAG_END;
            }
            // fall through
          case 40: break;
          case 12:
            { return HtmlToken.XML_ATTR_NAME;
            }
            // fall through
          case 41: break;
          case 13:
            { yybegin(ATTRIBUTE_VALUE); yypushback(1);
            }
            // fall through
          case 42: break;
          case 14:
            { yybegin(TAG_ATTRIBUTES); return HtmlToken.XML_ATTRIBUTE_VALUE;
            }
            // fall through
          case 43: break;
          case 15:
            { yybegin(YYINITIAL); return HtmlToken.XML_PI_END;
            }
            // fall through
          case 44: break;
          case 16:
            { return HtmlToken.XML_TAG_CHARACTERS;
            }
            // fall through
          case 45: break;
          case 17:
            { return HtmlToken.XML_END_TAG_START;
            }
            // fall through
          case 46: break;
          case 18:
            { yybegin(START_TAG_NAME); yypushback(yylength());
            }
            // fall through
          case 47: break;
          case 19:
            { yybegin(PROCESSING_INSTRUCTION); return HtmlToken.XML_PI_START;
            }
            // fall through
          case 48: break;
          case 20:
            { return HtmlToken.XML_ATTRIBUTE_VALUE;
            }
            // fall through
          case 49: break;
          case 21:
            { yybegin(YYINITIAL); return HtmlToken.XML_EMPTY_ELEMENT_END;
            }
            // fall through
          case 50: break;
          case 22:
            { return HtmlToken.XML_ENTITY_REF_TOKEN;
            }
            // fall through
          case 51: break;
          case 23:
            { yybegin(END_TAG_NAME); yypushback(yylength());
            }
            // fall through
          case 52: break;
          case 24:
            { yybegin(YYINITIAL); return HtmlToken.XML_COMMENT_CHARACTERS;
            }
            // fall through
          case 53: break;
          case 25:
            { return HtmlToken.XML_CHAR_ENTITY_REF;
            }
            // fall through
          case 54: break;
          case 26:
            { yybegin(COMMENT); yypushback(yylength());
            }
            // fall through
          case 55: break;
          case 27:
            { return HtmlToken.XML_TAG_NAME;
            }
            // fall through
          case 56: break;
          case 28:
            { return HtmlToken.XML_DOCTYPE_PUBLIC;
            }
            // fall through
          case 57: break;
          case 29:
            { yybegin(DOC_TYPE); return HtmlToken.XML_DOCTYPE_START;
            }
            // fall through
          case 58: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
