/*
 * Copyright 2023 Squircle CE contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.blacksquircle.ui.language.toml.lexer;

import org.jetbrains.annotations.NotNull;

@SuppressWarnings("all")

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.8.2
 * from the specification file <tt>toml.flex</tt>
 */
public class TomlLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000"+
    "\1\u5100\3\u0100\1\u5200\1\u5300\1\u5400\12\u1f00\4\u0100\1\u5500"+
    "\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700\1\u5800\2\u1f00"+
    "\1\u5900\1\u5a00\27\u0100\1\u5b00\4\u0100\1\u5c00\1\u5d00\42\u1f00"+
    "\1\u0100\1\u5e00\1\u5f00\11\u1f00\1\u6000\24\u1f00\1\u6100\1\u6200"+
    "\1\u1f00\1\u6300\1\u6400\1\u6500\1\u6600\2\u1f00\1\u6700\5\u1f00"+
    "\1\u6800\1\u6900\1\u6a00\5\u1f00\1\u6b00\1\u6c00\2\u1f00\1\u6d00"+
    "\1\u1f00\1\u6e00\14\u1f00\1\u6f00\4\u1f00\246\u0100\1\u7000\20\u0100"+
    "\1\u7100\1\u7200\25\u0100\1\u7300\34\u0100\1\u7400\14\u1f00\2\u0100"+
    "\1\u7500\5\u1f00\23\u0100\1\u7600\u0aec\u1f00\1\u7700\1\u7800\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\1\1\3\1\5\1\6\1\7\2\3\1\10\3\3"+
    "\1\11\1\12\1\13\1\14\1\3\1\15\1\16\6\17"+
    "\2\20\1\21\2\3\1\22\3\3\4\23\1\24\1\23"+
    "\15\25\1\26\5\25\1\27\1\30\1\31\1\32\1\3"+
    "\1\33\1\3\1\34\1\35\2\23\1\36\1\37\2\25"+
    "\1\40\2\25\1\41\1\25\1\42\1\43\2\25\1\44"+
    "\1\45\1\46\1\47\2\25\1\50\1\25\1\27\1\51"+
    "\1\3\1\52\1\3\41\0\2\3\4\7\4\3\1\7"+
    "\2\3\1\0\7\3\1\7\4\3\1\7\5\3\27\7"+
    "\1\3\37\7\1\3\u01ca\7\4\3\14\7\16\3\5\7"+
    "\7\3\1\7\1\3\1\7\21\3\160\0\5\7\1\3"+
    "\2\7\2\3\4\7\1\3\1\7\6\3\1\7\1\3"+
    "\3\7\1\3\1\7\1\3\24\7\1\3\123\7\1\3"+
    "\213\7\1\3\5\0\2\3\246\7\1\3\46\7\2\3"+
    "\1\7\6\3\51\7\6\3\1\7\1\3\55\0\1\3"+
    "\1\0\1\3\2\0\1\3\2\0\1\3\1\0\10\3"+
    "\33\7\4\3\4\7\15\3\6\0\5\3\1\7\4\3"+
    "\13\0\1\3\1\0\3\3\53\7\37\0\4\3\2\7"+
    "\1\0\143\7\1\3\1\7\10\0\1\3\6\0\2\7"+
    "\2\0\1\3\4\0\2\7\12\0\3\7\2\3\1\7"+
    "\17\3\1\0\1\7\1\0\36\7\33\0\2\3\131\7"+
    "\13\0\1\7\16\3\12\0\41\7\11\0\2\7\4\3"+
    "\1\7\2\3\1\0\30\7\4\0\1\7\11\0\1\7"+
    "\3\0\1\7\5\0\22\3\31\7\3\0\4\3\13\7"+
    "\65\3\25\7\1\3\22\7\13\3\61\0\66\7\3\0"+
    "\1\7\22\0\1\7\7\0\12\7\2\0\2\3\12\0"+
    "\1\3\20\7\3\0\1\3\10\7\2\3\2\7\2\3"+
    "\26\7\1\3\7\7\1\3\1\7\3\3\4\7\2\3"+
    "\1\0\1\7\7\0\2\3\2\0\2\3\3\0\1\7"+
    "\10\3\1\0\4\3\2\7\1\3\3\7\2\0\2\3"+
    "\12\0\4\7\7\3\2\7\1\3\1\0\2\3\3\0"+
    "\1\3\6\7\4\3\2\7\2\3\26\7\1\3\7\7"+
    "\1\3\2\7\1\3\2\7\1\3\2\7\2\3\1\0"+
    "\1\3\5\0\4\3\2\0\2\3\3\0\3\3\1\0"+
    "\7\3\4\7\1\3\1\7\7\3\14\0\3\7\1\0"+
    "\13\3\3\0\1\3\11\7\1\3\3\7\1\3\26\7"+
    "\1\3\7\7\1\3\2\7\1\3\5\7\2\3\1\0"+
    "\1\7\10\0\1\3\3\0\1\3\3\0\2\3\1\7"+
    "\17\3\2\7\2\0\2\3\12\0\1\3\1\7\7\3"+
    "\1\7\6\0\1\3\3\0\1\3\10\7\2\3\2\7"+
    "\2\3\26\7\1\3\7\7\1\3\2\7\1\3\5\7"+
    "\2\3\1\0\1\7\7\0\2\3\2\0\2\3\3\0"+
    "\7\3\3\0\4\3\2\7\1\3\3\7\2\0\2\3"+
    "\12\0\1\3\1\7\20\3\1\0\1\7\1\3\6\7"+
    "\3\3\3\7\1\3\4\7\3\3\2\7\1\3\1\7"+
    "\1\3\2\7\3\3\2\7\3\3\3\7\3\3\14\7"+
    "\4\3\5\0\3\3\3\0\1\3\4\0\2\3\1\7"+
    "\6\3\1\0\16\3\12\0\11\3\1\7\6\3\5\0"+
    "\10\7\1\3\3\7\1\3\27\7\1\3\20\7\3\3"+
    "\1\7\7\0\1\3\3\0\1\3\4\0\7\3\2\0"+
    "\1\3\3\7\5\3\2\7\2\0\2\3\12\0\20\3"+
    "\1\7\3\0\1\3\10\7\1\3\3\7\1\3\27\7"+
    "\1\3\12\7\1\3\5\7\2\3\1\0\1\7\7\0"+
    "\1\3\3\0\1\3\4\0\7\3\2\0\7\3\1\7"+
    "\1\3\2\7\2\0\2\3\12\0\1\3\2\7\15\3"+
    "\4\0\11\7\1\3\3\7\1\3\51\7\2\0\1\7"+
    "\7\0\1\3\3\0\1\3\4\0\1\7\5\3\3\7"+
    "\1\0\7\3\3\7\2\0\2\3\12\0\12\3\6\7"+
    "\1\3\3\0\1\3\22\7\3\3\30\7\1\3\11\7"+
    "\1\3\1\7\2\3\7\7\3\3\1\0\4\3\6\0"+
    "\1\3\1\0\1\3\10\0\6\3\12\0\2\3\2\0"+
    "\15\3\60\7\1\0\2\7\7\0\4\3\10\7\10\0"+
    "\1\3\12\0\47\3\2\7\1\3\1\7\1\3\5\7"+
    "\1\3\30\7\1\3\1\7\1\3\12\7\1\0\2\7"+
    "\11\0\1\7\2\3\5\7\1\3\1\7\1\3\6\0"+
    "\2\3\12\0\2\3\4\7\40\3\1\7\27\3\2\0"+
    "\6\3\12\0\13\3\1\0\1\3\1\0\1\3\1\0"+
    "\4\3\2\0\10\7\1\3\44\7\4\3\24\0\1\3"+
    "\2\0\5\7\13\0\1\3\44\0\11\3\1\0\71\3"+
    "\53\7\24\0\1\7\12\0\6\3\6\7\4\0\4\7"+
    "\3\0\1\7\3\0\2\7\7\0\3\7\4\0\15\7"+
    "\14\0\1\7\17\0\2\3\46\7\1\3\1\7\5\3"+
    "\1\7\2\3\53\7\1\3\115\7\1\3\4\7\2\3"+
    "\7\7\1\3\1\7\1\3\4\7\2\3\51\7\1\3"+
    "\4\7\2\3\41\7\1\3\4\7\2\3\7\7\1\3"+
    "\1\7\1\3\4\7\2\3\17\7\1\3\71\7\1\3"+
    "\4\7\2\3\103\7\2\3\3\0\40\3\20\7\20\3"+
    "\126\7\2\3\6\7\3\3\u016c\7\2\3\21\7\1\3"+
    "\32\7\5\3\113\7\3\3\13\7\7\3\15\7\1\3"+
    "\4\7\3\0\13\3\22\7\3\0\13\3\22\7\2\0"+
    "\14\3\15\7\1\3\3\7\1\3\2\0\14\3\64\7"+
    "\40\0\3\3\1\7\3\3\2\7\1\0\2\3\12\0"+
    "\41\3\4\0\1\3\12\0\6\3\131\7\7\3\5\7"+
    "\2\0\42\7\1\0\1\7\5\3\106\7\12\3\37\7"+
    "\1\3\14\0\4\3\14\0\12\3\12\0\36\7\2\3"+
    "\5\7\13\3\54\7\4\3\32\7\6\3\12\0\46\3"+
    "\27\7\5\0\4\3\65\7\12\0\1\3\35\0\2\3"+
    "\13\0\6\3\12\0\15\3\1\7\10\3\16\0\1\3"+
    "\2\0\77\3\5\0\57\7\21\0\7\7\4\3\12\0"+
    "\21\3\11\0\14\3\3\0\36\7\15\0\2\7\12\0"+
    "\54\7\16\0\14\3\44\7\24\0\10\3\12\0\3\3"+
    "\3\7\12\0\44\7\2\3\11\7\7\3\53\7\2\3"+
    "\3\7\20\3\3\0\1\3\25\0\4\7\1\0\6\7"+
    "\1\0\2\7\3\0\1\7\5\3\300\7\72\0\1\3"+
    "\5\0\26\7\2\3\6\7\2\3\46\7\2\3\6\7"+
    "\2\3\10\7\1\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\37\7\2\3\65\7\1\3\7\7\1\3\1\7"+
    "\3\3\3\7\1\3\7\7\3\3\4\7\2\3\6\7"+
    "\4\3\15\7\5\3\3\7\1\3\7\7\16\3\5\0"+
    "\32\3\5\0\20\3\2\7\23\3\1\7\13\3\5\0"+
    "\1\3\12\0\1\3\1\7\15\3\1\7\20\3\15\7"+
    "\3\3\40\7\20\3\15\0\4\3\1\0\3\3\14\0"+
    "\21\3\1\7\4\3\1\7\2\3\12\7\1\3\1\7"+
    "\3\3\5\7\6\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\4\7\1\3\13\7\2\3\4\7\5\3\5\7"+
    "\4\3\1\7\21\3\51\7\u0177\3\57\7\1\3\57\7"+
    "\1\3\205\7\6\3\4\7\3\0\2\7\14\3\46\7"+
    "\1\3\1\7\5\3\1\7\2\3\70\7\7\3\1\7"+
    "\17\3\1\0\27\7\11\3\7\7\1\3\7\7\1\3"+
    "\7\7\1\3\7\7\1\3\7\7\1\3\7\7\1\3"+
    "\7\7\1\3\7\7\1\3\40\0\57\3\1\7\325\3"+
    "\3\7\31\3\11\7\6\0\1\3\5\7\2\3\5\7"+
    "\4\3\126\7\2\3\2\0\2\3\3\7\1\3\132\7"+
    "\1\3\4\7\5\3\53\7\1\3\136\7\21\3\40\7"+
    "\60\3\320\7\100\3\375\7\3\3\215\7\103\3\56\7"+
    "\2\3\15\7\3\3\20\7\12\0\2\7\24\3\57\7"+
    "\1\0\4\3\12\0\1\3\37\7\2\0\120\7\2\0"+
    "\45\3\11\7\2\3\147\7\2\3\65\7\2\3\11\7"+
    "\52\3\15\7\1\0\3\7\1\0\4\7\1\0\27\7"+
    "\5\0\4\3\1\0\13\3\1\7\7\3\64\7\14\3"+
    "\2\0\62\7\22\0\12\3\12\0\6\3\22\0\6\7"+
    "\3\3\1\7\1\3\2\7\13\0\34\7\10\0\2\3"+
    "\27\7\15\0\14\3\35\7\3\3\4\0\57\7\16\0"+
    "\16\3\1\7\12\0\6\3\5\7\1\0\12\7\12\0"+
    "\5\7\1\3\51\7\16\0\11\3\3\7\1\0\10\7"+
    "\2\0\2\3\12\0\6\3\27\7\3\3\1\7\3\0"+
    "\62\7\1\0\1\7\3\0\2\7\2\0\5\7\2\0"+
    "\1\7\1\0\1\7\30\3\3\7\2\3\13\7\5\0"+
    "\2\3\3\7\2\0\12\3\6\7\2\3\6\7\2\3"+
    "\6\7\11\3\7\7\1\3\7\7\1\3\53\7\1\3"+
    "\16\7\6\3\163\7\10\0\1\3\2\0\2\3\12\0"+
    "\6\3\244\7\14\3\27\7\4\3\61\7\4\3\156\7"+
    "\2\3\152\7\46\3\7\7\14\3\5\7\5\3\1\7"+
    "\1\0\12\7\1\3\15\7\1\3\5\7\1\3\1\7"+
    "\1\3\2\7\1\3\2\7\1\3\154\7\41\3\153\7"+
    "\22\3\100\7\2\3\66\7\50\3\15\7\3\3\20\0"+
    "\20\3\20\0\3\3\2\7\30\3\3\7\31\3\1\7"+
    "\6\3\5\7\1\3\207\7\2\3\1\0\4\3\1\7"+
    "\13\3\12\0\7\3\32\7\4\3\1\7\1\3\32\7"+
    "\13\3\131\7\3\3\6\7\2\3\6\7\2\3\6\7"+
    "\2\3\3\7\3\3\2\7\3\3\2\7\22\3\3\0"+
    "\4\3\14\7\1\3\32\7\1\3\23\7\1\3\2\7"+
    "\1\3\17\7\2\3\16\7\42\3\173\7\105\3\65\7"+
    "\210\3\1\0\202\3\35\7\3\3\61\7\17\3\1\0"+
    "\37\3\40\7\15\3\36\7\5\3\46\7\5\0\5\3"+
    "\36\7\2\3\44\7\4\3\10\7\1\3\5\7\52\3"+
    "\236\7\2\3\12\0\6\3\44\7\4\3\44\7\4\3"+
    "\50\7\10\3\64\7\234\3\67\7\11\3\26\7\12\3"+
    "\10\7\230\3\6\7\2\3\1\7\1\3\54\7\1\3"+
    "\2\7\3\3\1\7\2\3\27\7\12\3\27\7\11\3"+
    "\37\7\101\3\23\7\1\3\2\7\12\3\26\7\12\3"+
    "\32\7\106\3\70\7\6\3\2\7\100\3\1\7\3\0"+
    "\1\3\2\0\5\3\4\0\4\7\1\3\3\7\1\3"+
    "\35\7\2\3\3\0\4\3\1\0\40\3\35\7\3\3"+
    "\35\7\43\3\10\7\1\3\34\7\2\0\31\3\66\7"+
    "\12\3\26\7\12\3\23\7\15\3\22\7\156\3\111\7"+
    "\67\3\63\7\15\3\63\7\15\3\44\7\4\0\10\3"+
    "\12\0\u0146\3\52\7\1\3\2\0\3\3\2\7\116\3"+
    "\35\7\12\3\1\7\10\3\26\7\13\0\137\3\25\7"+
    "\33\3\27\7\11\3\3\0\65\7\17\0\37\3\12\0"+
    "\17\3\4\0\55\7\13\0\2\3\1\0\17\3\1\0"+
    "\2\3\31\7\7\3\12\0\6\3\3\0\44\7\16\0"+
    "\1\3\12\0\4\3\1\7\2\0\1\7\10\3\43\7"+
    "\1\0\2\3\1\7\11\3\3\0\60\7\16\0\4\7"+
    "\4\3\4\0\1\3\14\0\1\7\1\3\1\7\43\3"+
    "\22\7\1\3\31\7\14\0\6\3\1\0\101\3\7\7"+
    "\1\3\1\7\1\3\4\7\1\3\17\7\1\3\12\7"+
    "\7\3\57\7\14\0\5\3\12\0\6\3\4\0\1\3"+
    "\10\7\2\3\2\7\2\3\26\7\1\3\7\7\1\3"+
    "\2\7\1\3\5\7\1\3\2\0\1\7\7\0\2\3"+
    "\2\0\2\3\3\0\2\3\1\7\6\3\1\0\5\3"+
    "\5\7\2\0\2\3\7\0\3\3\5\0\213\3\65\7"+
    "\22\0\4\7\5\3\12\0\4\3\1\0\3\7\36\3"+
    "\60\7\24\0\2\7\1\3\1\7\10\3\12\0\246\3"+
    "\57\7\7\0\2\3\11\0\27\3\4\7\2\0\42\3"+
    "\60\7\21\0\3\3\1\7\13\3\12\0\46\3\53\7"+
    "\15\0\1\7\7\3\12\0\66\3\33\7\2\3\17\0"+
    "\4\3\12\0\306\3\54\7\17\0\145\3\100\7\12\0"+
    "\25\3\10\7\2\3\1\7\2\3\10\7\1\3\2\7"+
    "\1\3\30\7\6\0\1\3\2\0\2\3\4\0\1\7"+
    "\1\0\1\7\2\0\14\3\12\0\106\3\10\7\2\3"+
    "\47\7\7\0\2\3\7\0\1\7\1\3\1\7\1\0"+
    "\33\3\1\7\12\0\50\7\7\0\1\7\4\0\10\3"+
    "\1\0\10\3\1\7\13\0\56\7\20\0\3\3\1\7"+
    "\42\3\71\7\7\3\11\7\1\3\45\7\10\0\1\3"+
    "\10\0\1\7\17\3\12\0\30\3\36\7\2\3\26\0"+
    "\1\3\16\0\111\3\7\7\1\3\2\7\1\3\46\7"+
    "\6\0\3\3\1\0\1\3\2\0\1\3\7\0\1\7"+
    "\1\0\10\3\12\0\6\3\6\7\1\3\2\7\1\3"+
    "\40\7\5\0\1\3\2\0\1\3\5\0\1\7\7\3"+
    "\12\0\u0136\3\23\7\4\0\271\3\1\7\54\3\4\7"+
    "\37\3\232\7\146\3\157\7\21\3\304\7\274\3\57\7"+
    "\1\3\11\0\307\3\107\7\271\3\71\7\7\3\37\7"+
    "\1\3\12\0\146\3\36\7\2\3\5\0\13\3\60\7"+
    "\7\0\11\3\4\7\14\3\12\0\11\3\25\7\5\3"+
    "\23\7\260\3\100\7\200\3\113\7\4\3\1\0\1\7"+
    "\67\0\7\3\4\0\15\7\100\3\2\7\1\3\1\7"+
    "\1\0\13\3\2\0\16\3\370\7\10\3\326\7\52\3"+
    "\11\7\367\3\37\7\61\3\3\7\21\3\4\7\10\3"+
    "\u018c\7\4\3\153\7\5\3\15\7\3\3\11\7\7\3"+
    "\12\7\3\3\2\0\1\3\4\0\301\3\5\0\3\3"+
    "\26\0\2\3\7\0\36\3\4\0\224\3\3\0\273\3"+
    "\125\7\1\3\107\7\1\3\2\7\2\3\1\7\2\3"+
    "\2\7\2\3\4\7\1\3\14\7\1\3\1\7\1\3"+
    "\7\7\1\3\101\7\1\3\4\7\2\3\10\7\1\3"+
    "\7\7\1\3\34\7\1\3\4\7\1\3\5\7\1\3"+
    "\1\7\3\3\7\7\1\3\u0154\7\2\3\31\7\1\3"+
    "\31\7\1\3\37\7\1\3\31\7\1\3\37\7\1\3"+
    "\31\7\1\3\37\7\1\3\31\7\1\3\37\7\1\3"+
    "\31\7\1\3\10\7\2\3\151\0\4\3\62\0\10\3"+
    "\1\0\16\3\1\0\26\3\5\0\1\3\17\0\120\3"+
    "\7\0\1\3\21\0\2\3\7\0\1\3\2\0\1\3"+
    "\5\0\325\3\55\7\3\3\7\0\7\7\2\3\12\0"+
    "\4\3\1\7\u0171\3\54\7\16\0\5\3\306\7\13\3"+
    "\7\0\51\3\104\7\7\0\1\7\4\3\12\0\u0156\3"+
    "\1\7\117\3\4\7\1\3\33\7\1\3\2\7\1\3"+
    "\1\7\2\3\1\7\1\3\12\7\1\3\4\7\1\3"+
    "\1\7\1\3\1\7\6\3\1\7\4\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\3\7\1\3\2\7\1\3"+
    "\1\7\2\3\1\7\1\3\1\7\1\3\1\7\1\3"+
    "\1\7\1\3\1\7\1\3\2\7\1\3\1\7\2\3"+
    "\4\7\1\3\7\7\1\3\4\7\1\3\4\7\1\3"+
    "\1\7\1\3\12\7\1\3\21\7\5\3\3\7\1\3"+
    "\5\7\1\3\21\7\u0134\3\12\0\6\3\336\7\42\3"+
    "\65\7\13\3\336\7\2\3\u0182\7\16\3\u0131\7\37\3"+
    "\36\7\342\3\113\7\266\3\1\0\36\3\140\0\200\3"+
    "\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30976];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\2\12\1\13\1\10\1\14\1\15"+
    "\4\10\1\16\1\17\3\3\3\6\2\12\2\0\3\10"+
    "\6\0\1\12\1\0\4\10\1\3\1\20\1\6\1\21"+
    "\2\0\2\10\1\12\3\0\6\12\1\10\1\12\1\10"+
    "\1\0\1\20\1\0\1\21\1\12\3\0\1\12\1\22"+
    "\1\0\1\20\1\0\1\21\2\0\1\20\1\0\1\21"+
    "\3\0\1\20\1\21\3\0\1\23\3\0\2\23\1\0"+
    "\1\23\6\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[111];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\53\0\126\0\201\0\254\0\327\0\u0102"+
    "\0\u012d\0\53\0\u0158\0\53\0\u0183\0\u01ae\0\53\0\u01d9"+
    "\0\53\0\53\0\u0204\0\u022f\0\u025a\0\u0285\0\53\0\53"+
    "\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387\0\u03b2\0\u03dd"+
    "\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4\0\u04df\0\u050a\0\u0535"+
    "\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d"+
    "\0\u06b8\0\53\0\u06e3\0\53\0\u070e\0\u0739\0\u0764\0\u078f"+
    "\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866\0\53\0\u0891\0\u08bc"+
    "\0\u08e7\0\u0912\0\u093d\0\u0968\0\u01d9\0\u0993\0\u09be\0\u09e9"+
    "\0\u0a14\0\u0a3f\0\u045e\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb\0\u01d9"+
    "\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\53\0\u0c18"+
    "\0\53\0\u0c43\0\u0c6e\0\u0c99\0\u0b16\0\u0b6c\0\u0cc4\0\u0cef"+
    "\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\53\0\u0df1\0\u0e1c"+
    "\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[111];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\3\16\1\2\1\17"+
    "\5\20\1\21\1\2\1\22\4\20\1\23\1\24\1\20"+
    "\1\25\3\20\1\26\2\20\1\27\1\30\55\0\1\3"+
    "\50\0\2\31\1\0\1\31\1\0\1\32\23\31\1\33"+
    "\21\31\2\6\1\0\1\6\1\0\46\6\1\7\6\0"+
    "\1\7\5\0\4\7\2\0\5\7\3\0\16\7\2\0"+
    "\2\34\1\0\1\34\1\0\3\34\1\35\20\34\1\36"+
    "\21\34\15\0\1\37\3\40\17\0\1\41\1\0\1\42"+
    "\23\0\1\43\1\0\1\37\3\40\2\0\5\43\3\0"+
    "\5\43\1\44\1\43\1\45\6\43\16\0\1\46\4\47"+
    "\3\0\1\50\10\0\1\51\1\50\4\0\1\52\4\0"+
    "\1\53\16\0\1\46\4\54\3\0\1\50\6\0\1\55"+
    "\2\0\1\50\14\0\1\7\6\0\1\7\3\0\1\43"+
    "\1\0\4\7\2\0\5\20\3\0\16\20\2\0\1\7"+
    "\6\0\1\7\3\0\1\43\1\0\4\7\2\0\5\20"+
    "\3\0\1\20\1\56\14\20\2\0\1\7\6\0\1\7"+
    "\3\0\1\43\1\0\4\7\2\0\5\20\3\0\7\20"+
    "\1\57\6\20\2\0\1\7\6\0\1\7\3\0\1\43"+
    "\1\0\4\7\2\0\5\20\3\0\1\20\1\60\14\20"+
    "\2\0\1\7\6\0\1\7\3\0\1\43\1\0\4\7"+
    "\2\0\5\20\3\0\11\20\1\61\4\20\2\0\2\31"+
    "\1\0\1\31\1\0\1\62\23\31\1\33\21\31\5\0"+
    "\1\63\45\0\31\31\1\33\21\31\2\34\1\0\1\34"+
    "\1\0\3\34\1\64\20\34\1\36\21\34\10\0\1\65"+
    "\42\0\31\34\1\36\21\34\14\0\1\46\7\0\1\50"+
    "\11\0\1\50\30\0\1\46\4\40\3\0\1\50\6\0"+
    "\1\55\2\0\1\50\56\0\1\66\44\0\1\67\31\0"+
    "\1\43\7\0\5\43\3\0\16\43\15\0\1\43\7\0"+
    "\5\43\3\0\7\43\1\70\6\43\15\0\1\43\7\0"+
    "\5\43\3\0\1\43\1\71\14\43\17\0\4\72\47\0"+
    "\4\73\1\74\42\0\1\75\1\0\1\75\1\0\1\76"+
    "\3\77\47\0\2\100\51\0\3\101\50\0\4\102\2\0"+
    "\2\102\7\0\4\102\27\0\1\46\4\103\1\74\2\0"+
    "\1\50\6\0\1\55\2\0\1\50\31\0\4\40\32\0"+
    "\1\7\6\0\1\7\3\0\1\43\1\0\4\7\2\0"+
    "\5\20\3\0\6\20\1\104\7\20\2\0\1\7\6\0"+
    "\1\7\3\0\1\43\1\0\4\7\2\0\5\20\3\0"+
    "\4\20\1\105\11\20\2\0\1\7\6\0\1\7\3\0"+
    "\1\43\1\0\4\7\2\0\5\20\3\0\7\20\1\105"+
    "\6\20\2\0\1\7\6\0\1\7\3\0\1\43\1\0"+
    "\4\7\2\0\5\20\3\0\14\20\1\106\1\20\2\0"+
    "\5\63\1\107\23\63\1\110\21\63\10\65\1\111\20\65"+
    "\1\112\21\65\37\0\1\76\55\0\1\76\23\0\1\43"+
    "\7\0\5\43\3\0\4\43\1\113\11\43\15\0\1\43"+
    "\7\0\5\43\3\0\7\43\1\113\6\43\17\0\4\72"+
    "\3\0\1\50\6\0\1\46\2\0\1\50\31\0\4\114"+
    "\47\0\4\115\47\0\1\76\3\77\47\0\4\77\12\0"+
    "\1\116\34\0\2\100\14\0\1\51\34\0\3\101\13\0"+
    "\1\52\34\0\4\102\2\0\2\102\6\0\1\53\4\102"+
    "\27\0\1\46\4\117\3\0\1\50\6\0\1\55\2\0"+
    "\1\50\14\0\1\7\6\0\1\7\3\0\1\43\1\0"+
    "\4\7\2\0\5\20\3\0\12\20\1\106\3\20\2\0"+
    "\1\7\6\0\1\7\3\0\1\43\1\0\4\7\2\0"+
    "\5\20\3\0\3\20\1\120\12\20\2\0\5\63\1\121"+
    "\52\63\1\122\23\63\1\110\21\63\10\65\1\123\52\65"+
    "\1\124\20\65\1\112\21\65\13\0\1\125\54\0\4\126"+
    "\47\0\4\77\45\0\1\125\1\46\4\40\3\0\1\50"+
    "\6\0\1\55\2\0\1\50\14\0\5\63\1\127\52\63"+
    "\1\130\23\63\1\110\21\63\10\65\1\131\52\65\1\132"+
    "\20\65\1\112\21\65\15\0\4\133\53\0\1\134\31\0"+
    "\5\63\1\135\45\63\10\65\1\136\42\65\15\0\4\137"+
    "\47\0\4\140\45\0\1\141\54\0\4\142\47\0\4\143"+
    "\43\0\1\144\1\0\1\144\1\145\12\0\1\146\40\0"+
    "\4\147\47\0\4\150\47\0\4\151\43\0\1\144\1\0"+
    "\1\144\12\0\1\152\1\146\16\0\1\152\21\0\4\153"+
    "\43\0\1\144\1\0\1\144\1\0\4\151\6\0\1\146"+
    "\40\0\4\154\53\0\1\155\46\0\4\156\47\0\4\157"+
    "\53\0\1\74\46\0\4\146\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3956];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\6\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\1\2\11\4\1\2\11\10\1\2\0\3\1\6\0"+
    "\1\1\1\0\4\1\1\11\1\1\1\11\1\1\2\0"+
    "\3\1\3\0\1\11\10\1\1\0\1\1\1\0\2\1"+
    "\3\0\2\1\1\0\1\1\1\0\1\1\2\0\1\11"+
    "\1\0\1\11\3\0\2\1\3\0\1\1\3\0\1\11"+
    "\1\1\1\0\1\1\6\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[111];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public final int getTokenStart() {
      return (int) yychar;
  }

  public final int getTokenEnd() {
      return getTokenStart() + yylength();
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TomlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @NotNull
  public TomlToken advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return TomlToken.EOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TomlToken.BAD_CHARACTER;
            }
            // fall through
          case 20: break;
          case 2:
            { return TomlToken.WHITESPACE;
            }
            // fall through
          case 21: break;
          case 3:
            { return TomlToken.BASIC_STRING;
            }
            // fall through
          case 22: break;
          case 4:
            { return TomlToken.COMMENT;
            }
            // fall through
          case 23: break;
          case 5:
            { return TomlToken.IDENTIFIER;
            }
            // fall through
          case 24: break;
          case 6:
            { return TomlToken.LITERAL_STRING;
            }
            // fall through
          case 25: break;
          case 7:
            { return TomlToken.COMMA;
            }
            // fall through
          case 26: break;
          case 8:
            { return TomlToken.KEY;
            }
            // fall through
          case 27: break;
          case 9:
            { return TomlToken.DOT;
            }
            // fall through
          case 28: break;
          case 10:
            { return TomlToken.NUMBER;
            }
            // fall through
          case 29: break;
          case 11:
            { return TomlToken.EQ;
            }
            // fall through
          case 30: break;
          case 12:
            { return TomlToken.LBRACK;
            }
            // fall through
          case 31: break;
          case 13:
            { return TomlToken.RBRACK;
            }
            // fall through
          case 32: break;
          case 14:
            { return TomlToken.LBRACE;
            }
            // fall through
          case 33: break;
          case 15:
            { return TomlToken.RBRACE;
            }
            // fall through
          case 34: break;
          case 16:
            { return TomlToken.MULTILINE_BASIC_STRING;
            }
            // fall through
          case 35: break;
          case 17:
            { return TomlToken.MULTILINE_LITERAL_STRING;
            }
            // fall through
          case 36: break;
          case 18:
            { return TomlToken.BOOLEAN;
            }
            // fall through
          case 37: break;
          case 19:
            { return TomlToken.DATE_TIME;
            }
            // fall through
          case 38: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
