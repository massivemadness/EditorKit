/*
 * Copyright 2023 Squircle CE contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.blacksquircle.ui.language.php.lexer;

import org.jetbrains.annotations.NotNull;

@SuppressWarnings("all")

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.8.2
 * from the specification file <tt>php.flex</tt>
 */
public class PhpLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\11\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\6\1\36\1\37\1\36\1\40\1\41\1\42\2\43"+
    "\1\44\4\43\1\45\1\43\1\46\7\43\1\47\2\43"+
    "\1\50\1\51\1\52\1\53\1\54\1\6\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\43"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\6\0\1\112\32\0\2\6"+
    "\4\113\4\6\1\113\2\6\1\0\7\6\1\113\4\6"+
    "\1\113\5\6\27\113\1\6\37\113\1\6\u01ca\113\4\6"+
    "\14\113\16\6\5\113\7\6\1\113\1\6\1\113\21\6"+
    "\160\0\5\113\1\6\2\113\2\6\4\113\1\6\1\113"+
    "\6\6\1\113\1\6\3\113\1\6\1\113\1\6\24\113"+
    "\1\6\123\113\1\6\213\113\1\6\5\0\2\6\246\113"+
    "\1\6\46\113\2\6\1\113\6\6\51\113\6\6\1\113"+
    "\1\6\55\0\1\6\1\0\1\6\2\0\1\6\2\0"+
    "\1\6\1\0\10\6\33\113\4\6\4\113\15\6\6\0"+
    "\5\6\1\113\4\6\13\0\1\6\1\0\3\6\53\113"+
    "\37\0\4\6\2\113\1\0\143\113\1\6\1\113\10\0"+
    "\1\6\6\0\2\113\2\0\1\6\4\0\2\113\12\0"+
    "\3\113\2\6\1\113\17\6\1\0\1\113\1\0\36\113"+
    "\33\0\2\6\131\113\13\0\1\113\16\6\12\0\41\113"+
    "\11\0\2\113\4\6\1\113\2\6\1\0\30\113\4\0"+
    "\1\113\11\0\1\113\3\0\1\113\5\0\22\6\31\113"+
    "\3\0\4\6\13\113\65\6\25\113\1\6\22\113\13\6"+
    "\61\0\66\113\3\0\1\113\22\0\1\113\7\0\12\113"+
    "\2\0\2\6\12\0\1\6\20\113\3\0\1\6\10\113"+
    "\2\6\2\113\2\6\26\113\1\6\7\113\1\6\1\113"+
    "\3\6\4\113\2\6\1\0\1\113\7\0\2\6\2\0"+
    "\2\6\3\0\1\113\10\6\1\0\4\6\2\113\1\6"+
    "\3\113\2\0\2\6\12\0\4\113\7\6\2\113\1\6"+
    "\1\0\2\6\3\0\1\6\6\113\4\6\2\113\2\6"+
    "\26\113\1\6\7\113\1\6\2\113\1\6\2\113\1\6"+
    "\2\113\2\6\1\0\1\6\5\0\4\6\2\0\2\6"+
    "\3\0\3\6\1\0\7\6\4\113\1\6\1\113\7\6"+
    "\14\0\3\113\1\0\13\6\3\0\1\6\11\113\1\6"+
    "\3\113\1\6\26\113\1\6\7\113\1\6\2\113\1\6"+
    "\5\113\2\6\1\0\1\113\10\0\1\6\3\0\1\6"+
    "\3\0\2\6\1\113\17\6\2\113\2\0\2\6\12\0"+
    "\1\6\1\113\7\6\1\113\6\0\1\6\3\0\1\6"+
    "\10\113\2\6\2\113\2\6\26\113\1\6\7\113\1\6"+
    "\2\113\1\6\5\113\2\6\1\0\1\113\7\0\2\6"+
    "\2\0\2\6\3\0\7\6\3\0\4\6\2\113\1\6"+
    "\3\113\2\0\2\6\12\0\1\6\1\113\20\6\1\0"+
    "\1\113\1\6\6\113\3\6\3\113\1\6\4\113\3\6"+
    "\2\113\1\6\1\113\1\6\2\113\3\6\2\113\3\6"+
    "\3\113\3\6\14\113\4\6\5\0\3\6\3\0\1\6"+
    "\4\0\2\6\1\113\6\6\1\0\16\6\12\0\11\6"+
    "\1\113\6\6\5\0\10\113\1\6\3\113\1\6\27\113"+
    "\1\6\20\113\3\6\1\113\7\0\1\6\3\0\1\6"+
    "\4\0\7\6\2\0\1\6\3\113\5\6\2\113\2\0"+
    "\2\6\12\0\20\6\1\113\3\0\1\6\10\113\1\6"+
    "\3\113\1\6\27\113\1\6\12\113\1\6\5\113\2\6"+
    "\1\0\1\113\7\0\1\6\3\0\1\6\4\0\7\6"+
    "\2\0\7\6\1\113\1\6\2\113\2\0\2\6\12\0"+
    "\1\6\2\113\15\6\4\0\11\113\1\6\3\113\1\6"+
    "\51\113\2\0\1\113\7\0\1\6\3\0\1\6\4\0"+
    "\1\113\5\6\3\113\1\0\7\6\3\113\2\0\2\6"+
    "\12\0\12\6\6\113\1\6\3\0\1\6\22\113\3\6"+
    "\30\113\1\6\11\113\1\6\1\113\2\6\7\113\3\6"+
    "\1\0\4\6\6\0\1\6\1\0\1\6\10\0\6\6"+
    "\12\0\2\6\2\0\15\6\60\113\1\0\2\113\7\0"+
    "\4\6\10\113\10\0\1\6\12\0\47\6\2\113\1\6"+
    "\1\113\1\6\5\113\1\6\30\113\1\6\1\113\1\6"+
    "\12\113\1\0\2\113\11\0\1\113\2\6\5\113\1\6"+
    "\1\113\1\6\6\0\2\6\12\0\2\6\4\113\40\6"+
    "\1\113\27\6\2\0\6\6\12\0\13\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\2\0\10\113\1\6\44\113"+
    "\4\6\24\0\1\6\2\0\5\113\13\0\1\6\44\0"+
    "\11\6\1\0\71\6\53\113\24\0\1\113\12\0\6\6"+
    "\6\113\4\0\4\113\3\0\1\113\3\0\2\113\7\0"+
    "\3\113\4\0\15\113\14\0\1\113\17\0\2\6\46\113"+
    "\1\6\1\113\5\6\1\113\2\6\53\113\1\6\115\113"+
    "\1\6\4\113\2\6\7\113\1\6\1\113\1\6\4\113"+
    "\2\6\51\113\1\6\4\113\2\6\41\113\1\6\4\113"+
    "\2\6\7\113\1\6\1\113\1\6\4\113\2\6\17\113"+
    "\1\6\71\113\1\6\4\113\2\6\103\113\2\6\3\0"+
    "\40\6\20\113\20\6\126\113\2\6\6\113\3\6\u016c\113"+
    "\2\6\21\113\1\6\32\113\5\6\113\113\3\6\13\113"+
    "\7\6\15\113\1\6\4\113\3\0\13\6\22\113\3\0"+
    "\13\6\22\113\2\0\14\6\15\113\1\6\3\113\1\6"+
    "\2\0\14\6\64\113\40\0\3\6\1\113\3\6\2\113"+
    "\1\0\2\6\12\0\41\6\4\0\1\6\12\0\6\6"+
    "\131\113\7\6\5\113\2\0\42\113\1\0\1\113\5\6"+
    "\106\113\12\6\37\113\1\6\14\0\4\6\14\0\12\6"+
    "\12\0\36\113\2\6\5\113\13\6\54\113\4\6\32\113"+
    "\6\6\12\0\46\6\27\113\5\0\4\6\65\113\12\0"+
    "\1\6\35\0\2\6\13\0\6\6\12\0\15\6\1\113"+
    "\10\6\16\0\1\6\2\0\77\6\5\0\57\113\21\0"+
    "\7\113\4\6\12\0\21\6\11\0\14\6\3\0\36\113"+
    "\15\0\2\113\12\0\54\113\16\0\14\6\44\113\24\0"+
    "\10\6\12\0\3\6\3\113\12\0\44\113\2\6\11\113"+
    "\7\6\53\113\2\6\3\113\20\6\3\0\1\6\25\0"+
    "\4\113\1\0\6\113\1\0\2\113\3\0\1\113\5\6"+
    "\300\113\72\0\1\6\5\0\26\113\2\6\6\113\2\6"+
    "\46\113\2\6\6\113\2\6\10\113\1\6\1\113\1\6"+
    "\1\113\1\6\1\113\1\6\37\113\2\6\65\113\1\6"+
    "\7\113\1\6\1\113\3\6\3\113\1\6\7\113\3\6"+
    "\4\113\2\6\6\113\4\6\15\113\5\6\3\113\1\6"+
    "\7\113\16\6\5\0\30\6\2\3\5\0\20\6\2\113"+
    "\23\6\1\113\13\6\5\0\1\6\12\0\1\6\1\113"+
    "\15\6\1\113\20\6\15\113\3\6\40\113\20\6\15\0"+
    "\4\6\1\0\3\6\14\0\21\6\1\113\4\6\1\113"+
    "\2\6\12\113\1\6\1\113\3\6\5\113\6\6\1\113"+
    "\1\6\1\113\1\6\1\113\1\6\4\113\1\6\13\113"+
    "\2\6\4\113\5\6\5\113\4\6\1\113\21\6\51\113"+
    "\u0177\6\57\113\1\6\57\113\1\6\205\113\6\6\4\113"+
    "\3\0\2\113\14\6\46\113\1\6\1\113\5\6\1\113"+
    "\2\6\70\113\7\6\1\113\17\6\1\0\27\113\11\6"+
    "\7\113\1\6\7\113\1\6\7\113\1\6\7\113\1\6"+
    "\7\113\1\6\7\113\1\6\7\113\1\6\7\113\1\6"+
    "\40\0\57\6\1\113\325\6\3\113\31\6\11\113\6\0"+
    "\1\6\5\113\2\6\5\113\4\6\126\113\2\6\2\0"+
    "\2\6\3\113\1\6\132\113\1\6\4\113\5\6\53\113"+
    "\1\6\136\113\21\6\40\113\60\6\320\113\100\6\375\113"+
    "\3\6\215\113\103\6\56\113\2\6\15\113\3\6\20\113"+
    "\12\0\2\113\24\6\57\113\1\0\4\6\12\0\1\6"+
    "\37\113\2\0\120\113\2\0\45\6\11\113\2\6\147\113"+
    "\2\6\65\113\2\6\11\113\52\6\15\113\1\0\3\113"+
    "\1\0\4\113\1\0\27\113\5\0\4\6\1\0\13\6"+
    "\1\113\7\6\64\113\14\6\2\0\62\113\22\0\12\6"+
    "\12\0\6\6\22\0\6\113\3\6\1\113\1\6\2\113"+
    "\13\0\34\113\10\0\2\6\27\113\15\0\14\6\35\113"+
    "\3\6\4\0\57\113\16\0\16\6\1\113\12\0\6\6"+
    "\5\113\1\0\12\113\12\0\5\113\1\6\51\113\16\0"+
    "\11\6\3\113\1\0\10\113\2\0\2\6\12\0\6\6"+
    "\27\113\3\6\1\113\3\0\62\113\1\0\1\113\3\0"+
    "\2\113\2\0\5\113\2\0\1\113\1\0\1\113\30\6"+
    "\3\113\2\6\13\113\5\0\2\6\3\113\2\0\12\6"+
    "\6\113\2\6\6\113\2\6\6\113\11\6\7\113\1\6"+
    "\7\113\1\6\53\113\1\6\16\113\6\6\163\113\10\0"+
    "\1\6\2\0\2\6\12\0\6\6\244\113\14\6\27\113"+
    "\4\6\61\113\4\6\u0100\3\156\113\2\6\152\113\46\6"+
    "\7\113\14\6\5\113\5\6\1\113\1\0\12\113\1\6"+
    "\15\113\1\6\5\113\1\6\1\113\1\6\2\113\1\6"+
    "\2\113\1\6\154\113\41\6\153\113\22\6\100\113\2\6"+
    "\66\113\50\6\15\113\3\6\20\0\20\6\20\0\3\6"+
    "\2\113\30\6\3\113\31\6\1\113\6\6\5\113\1\6"+
    "\207\113\2\6\1\0\4\6\1\113\13\6\12\0\7\6"+
    "\32\113\4\6\1\113\1\6\32\113\13\6\131\113\3\6"+
    "\6\113\2\6\6\113\2\6\6\113\2\6\3\113\3\6"+
    "\2\113\3\6\2\113\22\6\3\0\4\6\14\113\1\6"+
    "\32\113\1\6\23\113\1\6\2\113\1\6\17\113\2\6"+
    "\16\113\42\6\173\113\105\6\65\113\210\6\1\0\202\6"+
    "\35\113\3\6\61\113\17\6\1\0\37\6\40\113\15\6"+
    "\36\113\5\6\46\113\5\0\5\6\36\113\2\6\44\113"+
    "\4\6\10\113\1\6\5\113\52\6\236\113\2\6\12\0"+
    "\6\6\44\113\4\6\44\113\4\6\50\113\10\6\64\113"+
    "\234\6\67\113\11\6\26\113\12\6\10\113\230\6\6\113"+
    "\2\6\1\113\1\6\54\113\1\6\2\113\3\6\1\113"+
    "\2\6\27\113\12\6\27\113\11\6\37\113\101\6\23\113"+
    "\1\6\2\113\12\6\26\113\12\6\32\113\106\6\70\113"+
    "\6\6\2\113\100\6\1\113\3\0\1\6\2\0\5\6"+
    "\4\0\4\113\1\6\3\113\1\6\35\113\2\6\3\0"+
    "\4\6\1\0\40\6\35\113\3\6\35\113\43\6\10\113"+
    "\1\6\34\113\2\0\31\6\66\113\12\6\26\113\12\6"+
    "\23\113\15\6\22\113\156\6\111\113\67\6\63\113\15\6"+
    "\63\113\15\6\44\113\4\0\10\6\12\0\u0146\6\52\113"+
    "\1\6\2\0\3\6\2\113\116\6\35\113\12\6\1\113"+
    "\10\6\26\113\13\0\137\6\25\113\33\6\27\113\11\6"+
    "\3\0\65\113\17\0\37\6\12\0\17\6\4\0\55\113"+
    "\13\0\2\6\1\0\17\6\1\0\2\6\31\113\7\6"+
    "\12\0\6\6\3\0\44\113\16\0\1\6\12\0\4\6"+
    "\1\113\2\0\1\113\10\6\43\113\1\0\2\6\1\113"+
    "\11\6\3\0\60\113\16\0\4\113\4\6\4\0\1\6"+
    "\14\0\1\113\1\6\1\113\43\6\22\113\1\6\31\113"+
    "\14\0\6\6\1\0\101\6\7\113\1\6\1\113\1\6"+
    "\4\113\1\6\17\113\1\6\12\113\7\6\57\113\14\0"+
    "\5\6\12\0\6\6\4\0\1\6\10\113\2\6\2\113"+
    "\2\6\26\113\1\6\7\113\1\6\2\113\1\6\5\113"+
    "\1\6\2\0\1\113\7\0\2\6\2\0\2\6\3\0"+
    "\2\6\1\113\6\6\1\0\5\6\5\113\2\0\2\6"+
    "\7\0\3\6\5\0\213\6\65\113\22\0\4\113\5\6"+
    "\12\0\4\6\1\0\3\113\36\6\60\113\24\0\2\113"+
    "\1\6\1\113\10\6\12\0\246\6\57\113\7\0\2\6"+
    "\11\0\27\6\4\113\2\0\42\6\60\113\21\0\3\6"+
    "\1\113\13\6\12\0\46\6\53\113\15\0\1\113\7\6"+
    "\12\0\66\6\33\113\2\6\17\0\4\6\12\0\306\6"+
    "\54\113\17\0\145\6\100\113\12\0\25\6\10\113\2\6"+
    "\1\113\2\6\10\113\1\6\2\113\1\6\30\113\6\0"+
    "\1\6\2\0\2\6\4\0\1\113\1\0\1\113\2\0"+
    "\14\6\12\0\106\6\10\113\2\6\47\113\7\0\2\6"+
    "\7\0\1\113\1\6\1\113\1\0\33\6\1\113\12\0"+
    "\50\113\7\0\1\113\4\0\10\6\1\0\10\6\1\113"+
    "\13\0\56\113\20\0\3\6\1\113\42\6\71\113\7\6"+
    "\11\113\1\6\45\113\10\0\1\6\10\0\1\113\17\6"+
    "\12\0\30\6\36\113\2\6\26\0\1\6\16\0\111\6"+
    "\7\113\1\6\2\113\1\6\46\113\6\0\3\6\1\0"+
    "\1\6\2\0\1\6\7\0\1\113\1\0\10\6\12\0"+
    "\6\6\6\113\1\6\2\113\1\6\40\113\5\0\1\6"+
    "\2\0\1\6\5\0\1\113\7\6\12\0\u0136\6\23\113"+
    "\4\0\271\6\1\113\54\6\4\113\37\6\232\113\146\6"+
    "\157\113\21\6\304\113\274\6\57\113\1\6\11\0\307\6"+
    "\107\113\271\6\71\113\7\6\37\113\1\6\12\0\146\6"+
    "\36\113\2\6\5\0\13\6\60\113\7\0\11\6\4\113"+
    "\14\6\12\0\11\6\25\113\5\6\23\113\260\6\100\113"+
    "\200\6\113\113\4\6\1\0\1\113\67\0\7\6\4\0"+
    "\15\113\100\6\2\113\1\6\1\113\1\0\13\6\2\0"+
    "\16\6\370\113\10\6\326\113\52\6\11\113\367\6\37\113"+
    "\61\6\3\113\21\6\4\113\10\6\u018c\113\4\6\153\113"+
    "\5\6\15\113\3\6\11\113\7\6\12\113\3\6\2\0"+
    "\1\6\4\0\301\6\5\0\3\6\26\0\2\6\7\0"+
    "\36\6\4\0\224\6\3\0\273\6\125\113\1\6\107\113"+
    "\1\6\2\113\2\6\1\113\2\6\2\113\2\6\4\113"+
    "\1\6\14\113\1\6\1\113\1\6\7\113\1\6\101\113"+
    "\1\6\4\113\2\6\10\113\1\6\7\113\1\6\34\113"+
    "\1\6\4\113\1\6\5\113\1\6\1\113\3\6\7\113"+
    "\1\6\u0154\113\2\6\31\113\1\6\31\113\1\6\37\113"+
    "\1\6\31\113\1\6\37\113\1\6\31\113\1\6\37\113"+
    "\1\6\31\113\1\6\37\113\1\6\31\113\1\6\10\113"+
    "\2\6\151\0\4\6\62\0\10\6\1\0\16\6\1\0"+
    "\26\6\5\0\1\6\17\0\120\6\7\0\1\6\21\0"+
    "\2\6\7\0\1\6\2\0\1\6\5\0\325\6\55\113"+
    "\3\6\7\0\7\113\2\6\12\0\4\6\1\113\u0171\6"+
    "\54\113\16\0\5\6\306\113\13\6\7\0\51\6\104\113"+
    "\7\0\1\113\4\6\12\0\u0156\6\1\113\117\6\4\113"+
    "\1\6\33\113\1\6\2\113\1\6\1\113\2\6\1\113"+
    "\1\6\12\113\1\6\4\113\1\6\1\113\1\6\1\113"+
    "\6\6\1\113\4\6\1\113\1\6\1\113\1\6\1\113"+
    "\1\6\3\113\1\6\2\113\1\6\1\113\2\6\1\113"+
    "\1\6\1\113\1\6\1\113\1\6\1\113\1\6\1\113"+
    "\1\6\2\113\1\6\1\113\2\6\4\113\1\6\7\113"+
    "\1\6\4\113\1\6\4\113\1\6\1\113\1\6\12\113"+
    "\1\6\21\113\5\6\3\113\1\6\5\113\1\6\21\113"+
    "\u0134\6\12\0\6\6\336\113\42\6\65\113\13\6\336\113"+
    "\2\6\u0182\113\16\6\u0131\113\37\6\36\113\342\6\113\113"+
    "\266\6\1\0\36\6\140\0\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\2\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\3\6\1\31\1\32\1\33\21\6\1\34\1\1"+
    "\1\35\1\36\1\37\1\4\1\0\1\40\1\41\1\42"+
    "\1\43\1\11\1\0\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\22\2\51\1\54\1\22\1\0"+
    "\1\55\1\56\1\57\1\60\2\6\1\61\2\6\1\62"+
    "\11\6\1\63\13\6\1\64\4\6\1\65\1\6\1\66"+
    "\31\6\1\67\1\70\2\4\2\11\1\0\1\51\1\0"+
    "\1\22\1\71\1\72\1\73\1\6\1\74\17\6\1\75"+
    "\16\6\1\76\6\6\1\77\3\6\1\100\4\6\1\101"+
    "\23\6\1\102\3\6\1\103\4\6\1\52\1\0\1\104"+
    "\5\6\1\105\1\6\1\106\1\6\1\107\10\6\1\110"+
    "\1\111\1\112\1\6\1\113\1\6\1\114\1\115\10\6"+
    "\1\116\10\6\1\117\1\120\2\6\1\121\12\6\1\122"+
    "\5\6\1\123\3\6\1\124\3\6\1\125\2\6\1\126"+
    "\2\6\1\127\1\6\1\130\1\6\1\131\1\132\1\133"+
    "\1\134\6\6\1\135\3\6\1\136\1\137\1\140\12\6"+
    "\1\141\1\142\5\6\1\143\6\6\1\144\1\6\1\145"+
    "\2\6\1\146\1\147\3\6\1\150\1\6\1\151\7\6"+
    "\1\152\1\153\1\154\1\155\1\156\4\6\1\157\1\6"+
    "\1\160\6\6\1\161\1\6\1\162\4\6\1\163\2\6"+
    "\1\164\1\165\1\166\1\6\1\167\1\6\1\170\4\6"+
    "\1\171\3\6\1\172\1\173\1\174\1\175\2\6\1\176"+
    "\5\6\1\177\2\6\1\200\2\6\1\201\4\6\1\202"+
    "\1\203\1\204\1\205\1\206\1\207\5\6\1\210\2\6"+
    "\1\211\1\6\1\212\3\6\1\213\1\214\3\6\1\215"+
    "\1\216\1\217\1\6\1\220\2\6\1\221\1\222\1\6"+
    "\1\223\1\224\5\6\1\225\1\226\1\227";

  private static int [] zzUnpackAction() {
    int [] result = new int[488];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\114\0\230\0\344\0\u0130\0\u017c\0\u01c8"+
    "\0\u0214\0\u0260\0\u02ac\0\114\0\114\0\u02f8\0\u0344\0\114"+
    "\0\u0390\0\u03dc\0\u0428\0\u0474\0\u04c0\0\114\0\114\0\u050c"+
    "\0\u0558\0\u05a4\0\114\0\u05f0\0\u063c\0\u0688\0\114\0\114"+
    "\0\u06d4\0\u0720\0\u076c\0\u07b8\0\u0804\0\u0850\0\u089c\0\u08e8"+
    "\0\u0934\0\u0980\0\u09cc\0\u0a18\0\u0a64\0\u0ab0\0\u0afc\0\u0b48"+
    "\0\u0b94\0\u0be0\0\114\0\u0c2c\0\114\0\114\0\114\0\114"+
    "\0\u0c78\0\u0cc4\0\114\0\114\0\114\0\114\0\u0d10\0\114"+
    "\0\114\0\114\0\114\0\114\0\u0d5c\0\u0da8\0\114\0\u0df4"+
    "\0\114\0\u0e40\0\114\0\u0e8c\0\u0ed8\0\114\0\114\0\114"+
    "\0\u0f24\0\u0f70\0\u0fbc\0\114\0\u1008\0\u1054\0\u05f0\0\u10a0"+
    "\0\u10ec\0\u1138\0\u1184\0\u11d0\0\u121c\0\u1268\0\u12b4\0\u1300"+
    "\0\u134c\0\u1398\0\u13e4\0\u1430\0\u147c\0\u14c8\0\u1514\0\u1560"+
    "\0\u15ac\0\u15f8\0\u1644\0\u1690\0\u05f0\0\u16dc\0\u1728\0\u1774"+
    "\0\u17c0\0\u05f0\0\u180c\0\u1858\0\u18a4\0\u18f0\0\u193c\0\u1988"+
    "\0\u19d4\0\u1a20\0\u1a6c\0\u1ab8\0\u1b04\0\u1b50\0\u1b9c\0\u1be8"+
    "\0\u1c34\0\u1c80\0\u1ccc\0\u1d18\0\u1d64\0\u1db0\0\u1dfc\0\u1e48"+
    "\0\u1e94\0\u1ee0\0\u1f2c\0\u1f78\0\u1fc4\0\114\0\114\0\u2010"+
    "\0\u205c\0\u20a8\0\u20f4\0\u2140\0\u218c\0\u21d8\0\u2224\0\114"+
    "\0\114\0\u2270\0\u22bc\0\u05f0\0\u2308\0\u2354\0\u23a0\0\u23ec"+
    "\0\u2438\0\u2484\0\u24d0\0\u251c\0\u2568\0\u25b4\0\u2600\0\u264c"+
    "\0\u2698\0\u26e4\0\u2730\0\u05f0\0\u277c\0\u27c8\0\u2814\0\u2860"+
    "\0\u28ac\0\u28f8\0\u2944\0\u2990\0\u29dc\0\u2a28\0\u2a74\0\u2ac0"+
    "\0\u2b0c\0\u2b58\0\u2ba4\0\u2bf0\0\u2c3c\0\u2c88\0\u2cd4\0\u2d20"+
    "\0\u2d6c\0\u2db8\0\u2e04\0\u2e50\0\u2e9c\0\u05f0\0\u2ee8\0\u2f34"+
    "\0\u2f80\0\u2fcc\0\u05f0\0\u3018\0\u3064\0\u30b0\0\u30fc\0\u3148"+
    "\0\u3194\0\u31e0\0\u322c\0\u3278\0\u32c4\0\u3310\0\u335c\0\u33a8"+
    "\0\u33f4\0\u3440\0\u348c\0\u34d8\0\u3524\0\u3570\0\u05f0\0\u35bc"+
    "\0\u3608\0\u3654\0\u05f0\0\u36a0\0\u36ec\0\u3738\0\u3784\0\114"+
    "\0\u37d0\0\114\0\u381c\0\u3868\0\u38b4\0\u3900\0\u394c\0\u05f0"+
    "\0\u3998\0\u05f0\0\u39e4\0\u05f0\0\u3a30\0\u3a7c\0\u3ac8\0\u3b14"+
    "\0\u3b60\0\u3bac\0\u3bf8\0\u3c44\0\u05f0\0\u05f0\0\u3c90\0\u3cdc"+
    "\0\u05f0\0\u3d28\0\u05f0\0\u05f0\0\u3d74\0\u3dc0\0\u3e0c\0\u3e58"+
    "\0\u3ea4\0\u3ef0\0\u3f3c\0\u3f88\0\u05f0\0\u3fd4\0\u4020\0\u406c"+
    "\0\u40b8\0\u4104\0\u4150\0\u419c\0\u41e8\0\u05f0\0\u05f0\0\u4234"+
    "\0\u4280\0\u05f0\0\u42cc\0\u4318\0\u4364\0\u43b0\0\u43fc\0\u4448"+
    "\0\u4494\0\u44e0\0\u452c\0\u4578\0\u05f0\0\u45c4\0\u4610\0\u465c"+
    "\0\u46a8\0\u46f4\0\u05f0\0\u4740\0\u478c\0\u47d8\0\u05f0\0\u4824"+
    "\0\u4870\0\u48bc\0\u05f0\0\u4908\0\u4954\0\u05f0\0\u49a0\0\u49ec"+
    "\0\u05f0\0\u4a38\0\u05f0\0\u4a84\0\u05f0\0\u05f0\0\u05f0\0\u05f0"+
    "\0\u4ad0\0\u4b1c\0\u4b68\0\u4bb4\0\u4c00\0\u4c4c\0\u05f0\0\u4c98"+
    "\0\u4ce4\0\u4d30\0\u05f0\0\u4d7c\0\u05f0\0\u4dc8\0\u4e14\0\u4e60"+
    "\0\u4eac\0\u4ef8\0\u4f44\0\u4f90\0\u4fdc\0\u5028\0\u5074\0\u05f0"+
    "\0\u05f0\0\u50c0\0\u510c\0\u5158\0\u51a4\0\u51f0\0\u05f0\0\u523c"+
    "\0\u5288\0\u52d4\0\u5320\0\u536c\0\u53b8\0\u05f0\0\u5404\0\u05f0"+
    "\0\u5450\0\u549c\0\u54e8\0\u05f0\0\u5534\0\u5580\0\u55cc\0\u05f0"+
    "\0\u5618\0\u05f0\0\u5664\0\u56b0\0\u56fc\0\u5748\0\u5794\0\u57e0"+
    "\0\u582c\0\u05f0\0\u05f0\0\u05f0\0\u05f0\0\u05f0\0\u5878\0\u58c4"+
    "\0\u5910\0\u595c\0\u05f0\0\u59a8\0\u05f0\0\u59f4\0\u5a40\0\u5a8c"+
    "\0\u5ad8\0\u5b24\0\u5b70\0\u05f0\0\u5bbc\0\u05f0\0\u5c08\0\u5c54"+
    "\0\u5ca0\0\u5cec\0\u05f0\0\u5d38\0\u5d84\0\u05f0\0\u05f0\0\u05f0"+
    "\0\u5dd0\0\u05f0\0\u5e1c\0\u05f0\0\u5e68\0\u5eb4\0\u5f00\0\u5f4c"+
    "\0\u05f0\0\u5f98\0\u5fe4\0\u6030\0\u05f0\0\u05f0\0\u05f0\0\u05f0"+
    "\0\u607c\0\u60c8\0\u6114\0\u6160\0\u61ac\0\u61f8\0\u6244\0\u6290"+
    "\0\u05f0\0\u62dc\0\u6328\0\u05f0\0\u6374\0\u63c0\0\u640c\0\u6458"+
    "\0\u64a4\0\u64f0\0\u653c\0\u05f0\0\u05f0\0\u05f0\0\u05f0\0\u05f0"+
    "\0\u05f0\0\u6588\0\u65d4\0\u6620\0\u666c\0\u66b8\0\u05f0\0\u6704"+
    "\0\u6750\0\u05f0\0\u679c\0\u05f0\0\u67e8\0\u6834\0\u6880\0\u05f0"+
    "\0\u05f0\0\u68cc\0\u6918\0\u6964\0\u05f0\0\u05f0\0\u05f0\0\u69b0"+
    "\0\u05f0\0\u69fc\0\u6a48\0\u05f0\0\u05f0\0\u6a94\0\u05f0\0\u05f0"+
    "\0\u6ae0\0\u6b2c\0\u6b78\0\u6bc4\0\u6c10\0\u05f0\0\u05f0\0\u05f0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[488];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\1\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\6\34\1\35\1\36"+
    "\2\34\1\37\1\2\1\40\1\41\1\34\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\34\1\51\1\34"+
    "\1\52\1\34\1\53\1\34\1\54\1\34\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\3\34\1\63\1\64\1\65"+
    "\1\66\1\2\1\34\116\0\1\3\144\0\1\67\60\0"+
    "\2\6\1\0\2\6\1\0\2\6\1\70\40\6\1\71"+
    "\42\6\2\7\4\0\104\7\1\0\1\7\1\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\72\4\0\32\72\4\0"+
    "\2\34\33\0\1\73\74\0\1\74\16\0\1\75\60\0"+
    "\2\13\1\0\2\13\1\0\7\13\1\76\33\13\1\77"+
    "\42\13\33\0\1\100\101\0\1\101\11\0\1\102\103\0"+
    "\1\103\7\0\1\104\106\0\2\105\104\0\1\106\4\0"+
    "\1\7\5\0\1\107\104\0\1\105\1\0\2\25\7\0"+
    "\1\110\1\111\1\112\1\113\4\0\1\114\4\0\1\25"+
    "\1\0\1\110\1\0\1\111\1\112\1\113\20\0\1\114"+
    "\34\0\1\105\1\0\2\25\10\0\1\111\1\112\1\113"+
    "\11\0\1\25\3\0\1\111\1\112\1\113\63\0\1\115"+
    "\1\116\113\0\1\117\113\0\1\120\1\121\57\0\1\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\32\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\15\34\1\122\14\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\1\34\1\123\30\34"+
    "\4\0\2\34\33\0\1\124\60\0\1\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\2\34\1\125\16\34"+
    "\1\126\1\127\7\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\16\34\1\130\2\34\1\131"+
    "\6\34\1\132\1\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\1\34\1\133\6\34\1\134"+
    "\2\34\1\135\2\34\1\136\13\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\5\34\1\137"+
    "\3\34\1\140\4\34\1\141\13\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\1\34\1\142"+
    "\1\34\1\143\7\34\1\144\1\145\1\146\4\34\1\147"+
    "\2\34\1\150\1\34\1\151\2\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\1\34\1\152"+
    "\7\34\1\153\1\34\1\154\1\34\1\155\1\156\5\34"+
    "\1\157\5\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\13\34\1\160\2\34\1\161\13\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\6\34\1\162\5\34\1\163\1\164\4\34\1\165"+
    "\7\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\5\34\1\166\3\34\1\167\4\34\1\170"+
    "\13\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\1\34\1\171\3\34\1\172\16\34\1\173"+
    "\5\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\1\34\1\174\17\34\1\175\2\34\1\176"+
    "\5\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\5\34\1\177\24\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\5\34\1\200"+
    "\2\34\1\201\12\34\1\202\1\203\1\34\1\204\1\34"+
    "\1\205\1\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\10\34\1\206\10\34\1\207\6\34"+
    "\1\210\1\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\15\34\1\211\14\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\1\34"+
    "\1\212\14\34\1\213\13\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\10\34\1\214\1\215"+
    "\20\34\4\0\2\34\33\0\1\216\53\0\1\217\4\0"+
    "\1\6\1\220\2\6\1\220\1\221\106\6\1\34\11\0"+
    "\1\34\13\0\2\72\6\0\12\72\4\0\32\72\4\0"+
    "\2\34\1\13\1\222\2\13\1\222\1\223\106\13\26\0"+
    "\2\105\10\0\1\111\1\112\1\113\11\0\1\105\3\0"+
    "\1\111\1\112\1\113\31\0\20\106\1\224\73\106\26\0"+
    "\2\110\24\0\1\110\60\0\1\225\1\0\1\225\2\0"+
    "\2\225\10\0\1\111\1\0\1\113\11\0\1\225\3\0"+
    "\1\111\1\0\1\113\55\0\1\226\1\0\2\227\6\0"+
    "\5\227\11\0\7\227\64\0\1\230\113\0\1\231\1\232"+
    "\57\0\1\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\6\34\1\233\23\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\7\34\1\234\2\34\4\0\32\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\22\34\1\235\7\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\21\34\1\236\10\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\16\34\1\237\13\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\5\34\1\240\24\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\23\34\1\241\6\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\13\34\1\242\6\34"+
    "\1\243\1\244\6\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\1\34\1\245\30\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\1\34\1\246\14\34\1\247\13\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\15\34\1\250"+
    "\14\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\2\34\1\251\3\34\1\252\4\34\1\253"+
    "\16\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\5\34\1\254\24\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\24\34\1\255"+
    "\5\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\3\34\1\256\26\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\10\34\1\257"+
    "\21\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\22\34\1\260\7\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\17\34\1\261"+
    "\12\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\24\34\1\262\5\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\3\34\1\263"+
    "\26\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\1\34\1\264\30\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\11\34\1\265"+
    "\5\34\1\266\3\34\1\267\6\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\13\34\1\270"+
    "\16\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\15\34\1\271\14\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\16\34\1\272"+
    "\13\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\21\34\1\273\10\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\15\34\1\274"+
    "\14\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\16\34\1\275\13\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\23\34\1\276"+
    "\6\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\17\34\1\277\12\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\3\34\1\300"+
    "\16\34\1\301\1\302\6\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\4\34\1\303\2\34\1\304\2\34"+
    "\4\0\22\34\1\305\7\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\23\34\1\306\6\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\22\34\1\307\7\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\15\34\1\310\14\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\14\34\1\311\6\34\1\312\6\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\26\34"+
    "\1\313\3\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\13\34\1\314\16\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\3\34"+
    "\1\315\15\34\1\316\10\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\11\34\1\317\4\34"+
    "\1\320\13\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\2\34\1\321\27\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\1\34"+
    "\1\322\16\34\1\323\2\34\1\324\6\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\13\34"+
    "\1\325\16\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\16\34\1\326\13\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\1\34"+
    "\1\327\30\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\17\34\1\330\12\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\11\34"+
    "\1\331\20\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\15\34\1\332\14\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\11\34"+
    "\1\333\7\34\1\334\10\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\1\34\1\335\22\34"+
    "\1\336\3\34\1\337\1\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\17\34\1\340\12\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\5\34\1\341\14\34\1\342\7\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\21\34"+
    "\1\343\10\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\11\34\1\344\1\34\1\345\16\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\11\34\1\346\20\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\23\34\1\347\6\34"+
    "\4\0\2\34\1\6\1\220\2\6\1\220\1\221\2\6"+
    "\1\70\40\6\1\71\47\6\1\0\2\6\1\70\40\6"+
    "\1\71\42\6\1\13\1\222\2\13\1\222\1\223\7\13"+
    "\1\76\33\13\1\77\47\13\1\0\7\13\1\76\33\13"+
    "\1\77\42\13\20\106\1\224\4\106\1\350\66\106\26\0"+
    "\2\225\10\0\1\111\1\0\1\113\11\0\1\225\3\0"+
    "\1\111\1\0\1\113\57\0\2\351\6\0\5\351\11\0"+
    "\7\351\55\0\1\351\1\0\2\227\6\0\5\227\3\0"+
    "\1\112\5\0\7\227\10\0\1\112\53\0\1\352\60\0"+
    "\1\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\11\34\1\353\20\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\23\34\1\354\6\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\1\34\1\355\30\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\13\34\1\356\16\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\1\34\1\357\30\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\5\34\1\360\24\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\13\34\1\361\16\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\5\34\1\362\24\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\3\34\1\363\26\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\21\34\1\364\10\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\22\34\1\365\7\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\15\34\1\366\14\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\22\34\1\367\1\370\6\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\24\34\1\371\5\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\1\34\1\372\30\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\5\34\1\373\24\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\2\34\1\374\27\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\10\34\1\375\21\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\16\34\1\376\13\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\5\34\1\377\24\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\23\34\1\u0100\6\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\14\34\1\u0101\15\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\1\34\1\u0102\30\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\13\34\1\u0103\16\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\23\34\1\u0104\6\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\16\34\1\u0105\13\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\5\34\1\u0106\24\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\22\34\1\u0107\7\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\1\34\1\u0108\30\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\1\34\1\u0109\30\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\5\34\1\u010a\24\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\3\34\1\u010b\26\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\2\34\1\u010c\27\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\16\34\1\u010d\13\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\13\34\1\u010e\2\34\1\u010f\13\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\13\34"+
    "\1\u0110\16\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\23\34\1\u0111\6\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\5\34"+
    "\1\u0112\24\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\11\34\1\u0113\20\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\1\34"+
    "\1\u0114\30\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\5\34\1\u0115\24\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\23\34"+
    "\1\u0116\6\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\7\34\1\u0117\22\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\5\34"+
    "\1\u0118\24\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\11\34\1\u0119\20\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\13\34"+
    "\1\u011a\16\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\12\34\1\u011b\17\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\5\34"+
    "\1\u011c\14\34\1\u011d\7\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\15\34\1\u011e\7\34"+
    "\1\u011f\4\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\23\34\1\u0120\6\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\13\34"+
    "\1\u0121\16\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\4\34\1\u0122\25\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\24\34"+
    "\1\u0123\5\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\24\34\1\u0124\5\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\6\34"+
    "\1\u0125\23\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\21\34\1\u0126\10\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\23\34"+
    "\1\u0127\6\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\5\34\1\u0128\24\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\23\34"+
    "\1\u0129\6\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\3\34\1\u012a\26\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\22\34"+
    "\1\u012b\7\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\16\34\1\u012c\13\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\11\34"+
    "\1\u012d\3\34\1\u012e\14\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\5\34\1\u012f\24\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\5\34\1\u0130\24\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\22\34\1\u0131\7\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\5\34\1\u0132\24\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\4\34\1\u0133\25\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\1\34\1\u0134\30\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\13\34\1\u0135\16\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\10\34\1\u0136\21\34\4\0\2\34\26\0\2\351"+
    "\6\0\5\351\3\0\1\112\5\0\7\351\10\0\1\112"+
    "\20\0\1\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\15\34\1\u0137\14\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\21\34\1\u0138\10\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\30\34\1\u0139\1\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\5\34\1\u013a\24\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\12\34\1\u013b\17\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\1\34\1\u013c\30\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\10\34\1\u013d\21\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\22\34\1\u013e\7\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\5\34\1\u013f\24\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\23\34\1\u0140\6\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\11\34\1\u0141\20\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\7\34\1\u0142\22\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\24\34\1\u0143\5\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\23\34\1\u0144\6\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\13\34\1\u0145\16\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\11\34\1\u0146\20\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\30\34\1\u0147\1\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\17\34\1\u0148\12\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\21\34\1\u0149\10\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\15\34\1\u014a\14\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\5\34\1\u014b\24\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\13\34\1\u014c\16\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\23\34\1\u014d\6\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\1\34\1\u014e\30\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\23\34\1\u014f\6\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\1\34\1\u0150\30\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\5\34\1\u0151\24\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\21\34\1\u0152\10\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\24\34\1\u0153\5\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\1\34\1\u0154\3\34"+
    "\1\u0155\24\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\21\34\1\u0156\10\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\15\34"+
    "\1\u0157\14\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\7\34\1\u0158\2\34\4\0\32\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\23\34"+
    "\1\u0159\6\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\22\34\1\u015a\7\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\25\34"+
    "\1\u015b\4\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\1\34\1\u015c\30\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\15\34"+
    "\1\u015d\14\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\5\34\1\u015e\24\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\23\34"+
    "\1\u015f\6\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\1\34\1\u0160\30\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\5\34"+
    "\1\u0161\24\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\11\34\1\u0162\20\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\16\34"+
    "\1\u0163\13\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\11\34\1\u0164\20\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\21\34"+
    "\1\u0165\10\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\23\34\1\u0166\6\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\11\34"+
    "\1\u0167\20\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\21\34\1\u0168\10\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\3\34"+
    "\1\u0169\26\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\10\34\1\u016a\21\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\26\34"+
    "\1\u016b\3\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\23\34\1\u016c\6\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\22\34"+
    "\1\u016d\7\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\16\34\1\u016e\13\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\3\34"+
    "\1\u016f\26\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\23\34\1\u0170\6\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\23\34"+
    "\1\u0171\6\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\5\34\1\u0172\24\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\11\34"+
    "\1\u0173\20\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\1\34\1\u0174\30\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\1\34"+
    "\1\u0175\30\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\2\34\1\u0176\27\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\15\34"+
    "\1\u0177\14\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\7\34\1\u0178\22\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\13\34"+
    "\1\u0179\16\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\5\34\1\u017a\24\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\5\34"+
    "\1\u017b\24\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\6\34\1\u017c\23\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\5\34"+
    "\1\u017d\24\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\23\34\1\u017e\6\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\4\34"+
    "\1\u017f\25\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\13\34\1\u0180\16\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\3\34"+
    "\1\u0181\26\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\11\34\1\u0182\20\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\13\34"+
    "\1\u0183\16\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\14\34\1\u0184\15\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\23\34"+
    "\1\u0185\6\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\4\34\1\u0186\25\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\15\34"+
    "\1\u0187\14\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\1\34\1\u0188\30\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\6\34"+
    "\1\u0189\23\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\11\34\1\u018a\20\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\17\34"+
    "\1\u018b\12\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\5\34\1\u018c\24\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\7\34"+
    "\1\u018d\22\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\23\34\1\u018e\6\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\4\34\1\u018f\1\34"+
    "\1\u0190\3\34\4\0\32\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\23\34\1\u0191\6\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\3\34\1\u0192\26\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\3\34\1\u0193\26\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\15\34\1\u0194\14\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\21\34\1\u0195\10\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\15\34\1\u0196\14\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\3\34\1\u0197\26\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\10\34\1\u0198\21\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\21\34\1\u0199\10\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\22\34\1\u019a\7\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\11\34\1\u019b\20\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\6\34\1\u019c\23\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\1\34\1\u019d\30\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\11\34\1\u019e\20\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\23\34\1\u019f\6\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\3\34\1\u01a0\26\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\15\34\1\u01a1\14\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\13\34\1\u01a2\16\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\24\34\1\u01a3\5\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\5\34\1\u01a4\24\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\23\34\1\u01a5\6\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\22\34\1\u01a6\7\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\30\34\1\u01a7\1\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\10\34\1\u01a8\21\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\16\34\1\u01a9\13\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\5\34\1\u01aa\24\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\5\34\1\u01ab\24\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\3\34\1\u01ac\26\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\4\34\1\u01ad\25\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\1\34\1\u01ae\30\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\23\34\1\u01af\6\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\1\34\1\u01b0\30\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\5\34\1\u01b1\24\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\13\34\1\u01b2\16\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\15\34\1\u01b3\14\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\5\34\1\u01b4\24\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\23\34\1\u01b5\6\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\13\34\1\u01b6\16\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\5\34\1\u01b7\24\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\16\34\1\u01b8\13\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\5\34\1\u01b9\24\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\17\34\1\u01ba\12\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\13\34\1\u01bb\16\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\30\34\1\u01bc\1\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\23\34\1\u01bd\6\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\5\34\1\u01be\24\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\5\34\1\u01bf\24\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\21\34\1\u01c0\10\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\15\34\1\u01c1\14\34"+
    "\4\0\3\34\11\0\1\34\13\0\2\34\6\0\12\34"+
    "\4\0\15\34\1\u01c2\14\34\4\0\3\34\11\0\1\34"+
    "\13\0\2\34\6\0\12\34\4\0\1\u01c3\31\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\5\34\1\u01c4\24\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\16\34\1\u01c5\13\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\3\34\1\u01c6\26\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\5\34\1\u01c7\24\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\3\34\1\u01c8\26\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\16\34\1\u01c9\13\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\23\34\1\u01ca\6\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\5\34\1\u01cb\24\34\4\0"+
    "\3\34\11\0\1\34\13\0\2\34\6\0\12\34\4\0"+
    "\30\34\1\u01cc\1\34\4\0\3\34\11\0\1\34\13\0"+
    "\2\34\6\0\12\34\4\0\1\u01cd\31\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\15\34"+
    "\1\u01ce\14\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\15\34\1\u01cf\14\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\5\34"+
    "\1\u01d0\24\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\5\34\1\u01d1\24\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\23\34"+
    "\1\u01d2\6\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\16\34\1\u01d3\13\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\16\34"+
    "\1\u01d4\13\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\6\34\1\u01d5\23\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\5\34"+
    "\1\u01d6\24\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\5\34\1\u01d7\24\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\1\34"+
    "\1\u01d8\30\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\4\34\1\u01d9\25\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\16\34"+
    "\1\u01da\13\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\11\34\1\u01db\20\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\23\34"+
    "\1\u01dc\6\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\22\34\1\u01dd\7\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\15\34"+
    "\1\u01de\14\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\6\34\1\u01df\23\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\23\34"+
    "\1\u01e0\6\34\4\0\3\34\11\0\1\34\13\0\2\34"+
    "\6\0\12\34\4\0\15\34\1\u01e1\14\34\4\0\3\34"+
    "\11\0\1\34\13\0\2\34\6\0\12\34\4\0\31\34"+
    "\1\u01e2\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\3\34\1\u01e3\26\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\3\34\1\u01e4"+
    "\26\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\5\34\1\u01e5\24\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\5\34\1\u01e6"+
    "\24\34\4\0\3\34\11\0\1\34\13\0\2\34\6\0"+
    "\12\34\4\0\5\34\1\u01e7\24\34\4\0\3\34\11\0"+
    "\1\34\13\0\2\34\6\0\12\34\4\0\4\34\1\u01e8"+
    "\25\34\4\0\2\34";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27740];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\10\1\2\11\2\1\1\11\5\1\2\11"+
    "\3\1\1\11\3\1\2\11\22\1\1\11\1\1\4\11"+
    "\1\0\1\1\4\11\1\0\5\11\2\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\0\3\11\3\1\1\11"+
    "\71\1\2\11\4\1\1\0\1\1\1\0\1\1\2\11"+
    "\116\1\1\11\1\0\1\11\376\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[488];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public final int getTokenStart() {
      return (int) yychar;
  }

  public final int getTokenEnd() {
      return getTokenStart() + yylength();
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhpLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @NotNull
  public PhpToken advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return PhpToken.EOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return PhpToken.BAD_CHARACTER;
            }
            // fall through
          case 152: break;
          case 2:
            { return PhpToken.WHITESPACE;
            }
            // fall through
          case 153: break;
          case 3:
            { return PhpToken.NOT;
            }
            // fall through
          case 154: break;
          case 4:
            { return PhpToken.DOUBLE_QUOTED_STRING;
            }
            // fall through
          case 155: break;
          case 5:
            { return PhpToken.LINE_COMMENT;
            }
            // fall through
          case 156: break;
          case 6:
            { return PhpToken.IDENTIFIER;
            }
            // fall through
          case 157: break;
          case 7:
            { return PhpToken.MOD;
            }
            // fall through
          case 158: break;
          case 8:
            { return PhpToken.AND;
            }
            // fall through
          case 159: break;
          case 9:
            { return PhpToken.SINGLE_QUOTED_STRING;
            }
            // fall through
          case 160: break;
          case 10:
            { return PhpToken.LPAREN;
            }
            // fall through
          case 161: break;
          case 11:
            { return PhpToken.RPAREN;
            }
            // fall through
          case 162: break;
          case 12:
            { return PhpToken.MULT;
            }
            // fall through
          case 163: break;
          case 13:
            { return PhpToken.PLUS;
            }
            // fall through
          case 164: break;
          case 14:
            { return PhpToken.COMMA;
            }
            // fall through
          case 165: break;
          case 15:
            { return PhpToken.MINUS;
            }
            // fall through
          case 166: break;
          case 16:
            { return PhpToken.DOT;
            }
            // fall through
          case 167: break;
          case 17:
            { return PhpToken.DIV;
            }
            // fall through
          case 168: break;
          case 18:
            { return PhpToken.INTEGER_LITERAL;
            }
            // fall through
          case 169: break;
          case 19:
            { return PhpToken.COLON;
            }
            // fall through
          case 170: break;
          case 20:
            { return PhpToken.SEMICOLON;
            }
            // fall through
          case 171: break;
          case 21:
            { return PhpToken.LT;
            }
            // fall through
          case 172: break;
          case 22:
            { return PhpToken.EQ;
            }
            // fall through
          case 173: break;
          case 23:
            { return PhpToken.GT;
            }
            // fall through
          case 174: break;
          case 24:
            { return PhpToken.QUEST;
            }
            // fall through
          case 175: break;
          case 25:
            { return PhpToken.LBRACK;
            }
            // fall through
          case 176: break;
          case 26:
            { return PhpToken.RBRACK;
            }
            // fall through
          case 177: break;
          case 27:
            { return PhpToken.XOR;
            }
            // fall through
          case 178: break;
          case 28:
            { return PhpToken.LBRACE;
            }
            // fall through
          case 179: break;
          case 29:
            { return PhpToken.RBRACE;
            }
            // fall through
          case 180: break;
          case 30:
            { return PhpToken.TILDA;
            }
            // fall through
          case 181: break;
          case 31:
            { return PhpToken.NOTEQ;
            }
            // fall through
          case 182: break;
          case 32:
            { return PhpToken.VARIABLE_LITERAL;
            }
            // fall through
          case 183: break;
          case 33:
            { return PhpToken.MODEQ;
            }
            // fall through
          case 184: break;
          case 34:
            { return PhpToken.ANDAND;
            }
            // fall through
          case 185: break;
          case 35:
            { return PhpToken.ANDEQ;
            }
            // fall through
          case 186: break;
          case 36:
            { return PhpToken.MULTEQ;
            }
            // fall through
          case 187: break;
          case 37:
            { return PhpToken.PLUSPLUS;
            }
            // fall through
          case 188: break;
          case 38:
            { return PhpToken.PLUSEQ;
            }
            // fall through
          case 189: break;
          case 39:
            { return PhpToken.MINUSMINUS;
            }
            // fall through
          case 190: break;
          case 40:
            { return PhpToken.MINUSEQ;
            }
            // fall through
          case 191: break;
          case 41:
            { return PhpToken.DOUBLE_LITERAL;
            }
            // fall through
          case 192: break;
          case 42:
            { return PhpToken.BLOCK_COMMENT;
            }
            // fall through
          case 193: break;
          case 43:
            { return PhpToken.DIVEQ;
            }
            // fall through
          case 194: break;
          case 44:
            { return PhpToken.FLOAT_LITERAL;
            }
            // fall through
          case 195: break;
          case 45:
            { return PhpToken.LTEQ;
            }
            // fall through
          case 196: break;
          case 46:
            { return PhpToken.EQEQ;
            }
            // fall through
          case 197: break;
          case 47:
            { return PhpToken.GTEQ;
            }
            // fall through
          case 198: break;
          case 48:
            { return PhpToken.GTGT;
            }
            // fall through
          case 199: break;
          case 49:
            { return PhpToken.XOREQ;
            }
            // fall through
          case 200: break;
          case 50:
            { return PhpToken.AS;
            }
            // fall through
          case 201: break;
          case 51:
            { return PhpToken.DO;
            }
            // fall through
          case 202: break;
          case 52:
            { return PhpToken.FN;
            }
            // fall through
          case 203: break;
          case 53:
            { return PhpToken.IF;
            }
            // fall through
          case 204: break;
          case 54:
            { return PhpToken.IN;
            }
            // fall through
          case 205: break;
          case 55:
            { return PhpToken.OREQ;
            }
            // fall through
          case 206: break;
          case 56:
            { return PhpToken.OROR;
            }
            // fall through
          case 207: break;
          case 57:
            { return PhpToken.LTLTEQ;
            }
            // fall through
          case 208: break;
          case 58:
            { return PhpToken.GTGTEQ;
            }
            // fall through
          case 209: break;
          case 59:
            { return PhpToken.GTGTGT;
            }
            // fall through
          case 210: break;
          case 60:
            { return PhpToken.NAN;
            }
            // fall through
          case 211: break;
          case 61:
            { return PhpToken.DIE;
            }
            // fall through
          case 212: break;
          case 62:
            { return PhpToken.FOR;
            }
            // fall through
          case 213: break;
          case 63:
            { return PhpToken.INT;
            }
            // fall through
          case 214: break;
          case 64:
            { return PhpToken.LET;
            }
            // fall through
          case 215: break;
          case 65:
            { return PhpToken.NEW;
            }
            // fall through
          case 216: break;
          case 66:
            { return PhpToken.TRY;
            }
            // fall through
          case 217: break;
          case 67:
            { return PhpToken.VAR;
            }
            // fall through
          case 218: break;
          case 68:
            { return PhpToken.GTGTGTEQ;
            }
            // fall through
          case 219: break;
          case 69:
            { return PhpToken.BYTE;
            }
            // fall through
          case 220: break;
          case 70:
            { return PhpToken.CASE;
            }
            // fall through
          case 221: break;
          case 71:
            { return PhpToken.CHAR;
            }
            // fall through
          case 222: break;
          case 72:
            { return PhpToken.EACH;
            }
            // fall through
          case 223: break;
          case 73:
            { return PhpToken.ECHO;
            }
            // fall through
          case 224: break;
          case 74:
            { return PhpToken.ELSE;
            }
            // fall through
          case 225: break;
          case 75:
            { return PhpToken.ENUM;
            }
            // fall through
          case 226: break;
          case 76:
            { return PhpToken.EVAL;
            }
            // fall through
          case 227: break;
          case 77:
            { return PhpToken.EXIT;
            }
            // fall through
          case 228: break;
          case 78:
            { return PhpToken.GOTO;
            }
            // fall through
          case 229: break;
          case 79:
            { return PhpToken.LIST;
            }
            // fall through
          case 230: break;
          case 80:
            { return PhpToken.LONG;
            }
            // fall through
          case 231: break;
          case 81:
            { return PhpToken.NULL;
            }
            // fall through
          case 232: break;
          case 82:
            { return PhpToken.SELF;
            }
            // fall through
          case 233: break;
          case 83:
            { return PhpToken.THIS;
            }
            // fall through
          case 234: break;
          case 84:
            { return PhpToken.TRUE;
            }
            // fall through
          case 235: break;
          case 85:
            { return PhpToken.VOID;
            }
            // fall through
          case 236: break;
          case 86:
            { return PhpToken.WITH;
            }
            // fall through
          case 237: break;
          case 87:
            { return PhpToken.ARRAY;
            }
            // fall through
          case 238: break;
          case 88:
            { return PhpToken.BREAK;
            }
            // fall through
          case 239: break;
          case 89:
            { return PhpToken.CATCH;
            }
            // fall through
          case 240: break;
          case 90:
            { return PhpToken.CLASS;
            }
            // fall through
          case 241: break;
          case 91:
            { return PhpToken.CLONE;
            }
            // fall through
          case 242: break;
          case 92:
            { return PhpToken.CONST;
            }
            // fall through
          case 243: break;
          case 93:
            { return PhpToken.EMPTY;
            }
            // fall through
          case 244: break;
          case 94:
            { return PhpToken.FALSE;
            }
            // fall through
          case 245: break;
          case 95:
            { return PhpToken.FINAL;
            }
            // fall through
          case 246: break;
          case 96:
            { return PhpToken.FLOAT;
            }
            // fall through
          case 247: break;
          case 97:
            { return PhpToken.ISNAN;
            }
            // fall through
          case 248: break;
          case 98:
            { return PhpToken.ISSET;
            }
            // fall through
          case 249: break;
          case 99:
            { return PhpToken.PRINT;
            }
            // fall through
          case 250: break;
          case 100:
            { return PhpToken.SHORT;
            }
            // fall through
          case 251: break;
          case 101:
            { return PhpToken.SUPER;
            }
            // fall through
          case 252: break;
          case 102:
            { return PhpToken.THROW;
            }
            // fall through
          case 253: break;
          case 103:
            { return PhpToken.TRAIT;
            }
            // fall through
          case 254: break;
          case 104:
            { return PhpToken.UNSET;
            }
            // fall through
          case 255: break;
          case 105:
            { return PhpToken.WHILE;
            }
            // fall through
          case 256: break;
          case 106:
            { return PhpToken.DELETE;
            }
            // fall through
          case 257: break;
          case 107:
            { return PhpToken.DOUBLE;
            }
            // fall through
          case 258: break;
          case 108:
            { return PhpToken.ELSEIF;
            }
            // fall through
          case 259: break;
          case 109:
            { return PhpToken.ESCAPE;
            }
            // fall through
          case 260: break;
          case 110:
            { return PhpToken.EXPORT;
            }
            // fall through
          case 261: break;
          case 111:
            { return PhpToken.GLOBAL;
            }
            // fall through
          case 262: break;
          case 112:
            { return PhpToken.IMPORT;
            }
            // fall through
          case 263: break;
          case 113:
            { return PhpToken.NATIVE;
            }
            // fall through
          case 264: break;
          case 114:
            { return PhpToken.PARENT;
            }
            // fall through
          case 265: break;
          case 115:
            { return PhpToken.PUBLIC;
            }
            // fall through
          case 266: break;
          case 116:
            { return PhpToken.RETURN;
            }
            // fall through
          case 267: break;
          case 117:
            { return PhpToken.STATIC;
            }
            // fall through
          case 268: break;
          case 118:
            { return PhpToken.SWITCH;
            }
            // fall through
          case 269: break;
          case 119:
            { return PhpToken.THROWS;
            }
            // fall through
          case 270: break;
          case 120:
            { return PhpToken.TYPEOF;
            }
            // fall through
          case 271: break;
          case 121:
            { return PhpToken.BOOLEAN;
            }
            // fall through
          case 272: break;
          case 122:
            { return PhpToken.DEFAULT;
            }
            // fall through
          case 273: break;
          case 123:
            { return PhpToken.EXTENDS;
            }
            // fall through
          case 274: break;
          case 124:
            { return PhpToken.FINALLY;
            }
            // fall through
          case 275: break;
          case 125:
            { return PhpToken.FOREACH;
            }
            // fall through
          case 276: break;
          case 126:
            { return PhpToken.INCLUDE;
            }
            // fall through
          case 277: break;
          case 127:
            { return PhpToken.PACKAGE;
            }
            // fall through
          case 278: break;
          case 128:
            { return PhpToken.PRIVATE;
            }
            // fall through
          case 279: break;
          case 129:
            { return PhpToken.REQUIRE;
            }
            // fall through
          case 280: break;
          case 130:
            { return PhpToken.INFINITY;
            }
            // fall through
          case 281: break;
          case 131:
            { return PhpToken.ABSTRACT;
            }
            // fall through
          case 282: break;
          case 132:
            { return PhpToken.CALLABLE;
            }
            // fall through
          case 283: break;
          case 133:
            { return PhpToken.CONTINUE;
            }
            // fall through
          case 284: break;
          case 134:
            { return PhpToken.DEBUGGER;
            }
            // fall through
          case 285: break;
          case 135:
            { return PhpToken.FUNCTION;
            }
            // fall through
          case 286: break;
          case 136:
            { return PhpToken.ISFINITE;
            }
            // fall through
          case 287: break;
          case 137:
            { return PhpToken.PARSEINT;
            }
            // fall through
          case 288: break;
          case 138:
            { return PhpToken.READONLY;
            }
            // fall through
          case 289: break;
          case 139:
            { return PhpToken.UNESCAPE;
            }
            // fall through
          case 290: break;
          case 140:
            { return PhpToken.VOLATILE;
            }
            // fall through
          case 291: break;
          case 141:
            { return PhpToken.INSTEADOF;
            }
            // fall through
          case 292: break;
          case 142:
            { return PhpToken.INTERFACE;
            }
            // fall through
          case 293: break;
          case 143:
            { return PhpToken.NAMESPACE;
            }
            // fall through
          case 294: break;
          case 144:
            { return PhpToken.PROTECTED;
            }
            // fall through
          case 295: break;
          case 145:
            { return PhpToken.TRANSIENT;
            }
            // fall through
          case 296: break;
          case 146:
            { return PhpToken.IMPLEMENTS;
            }
            // fall through
          case 297: break;
          case 147:
            { return PhpToken.INSTANCEOF;
            }
            // fall through
          case 298: break;
          case 148:
            { return PhpToken.PARSEFLOAT;
            }
            // fall through
          case 299: break;
          case 149:
            { return PhpToken.INCLUDE_ONCE;
            }
            // fall through
          case 300: break;
          case 150:
            { return PhpToken.REQUIRE_ONCE;
            }
            // fall through
          case 301: break;
          case 151:
            { return PhpToken.SYNCHRONIZED;
            }
            // fall through
          case 302: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
